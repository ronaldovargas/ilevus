"use strict";

var moment = require("moment");
var React = require('react');
var Link = require("react-router").Link;
var Toastr = require("toastr");

var Messages = require("ilevus/jsx/core/util/Messages.jsx");
var CoachingStore = require("ilevus/jsx/core/store/Coaching.jsx");
var UserSession = require("ilevus/jsx/core/store/UserSession.jsx");

var LoadingGauge = require("ilevus/jsx/core/widget/LoadingGauge.jsx");

var string = require("string");
var UserIcon = require("ilevus/img/user.png");

module.exports = React.createClass({
    displayName: "exports",

    contextTypes: {
        router: React.PropTypes.object
    },

    getInitialState: function getInitialState() {
        return {
            asCoach: null,
            asCoachee: null,
            loaded: false
        };
    },
    componentDidMount: function componentDidMount() {
        var me = this;
        CoachingStore.on("retrieve-coach-processes", function (processes) {
            me.setState({
                asCoach: processes || [],
                loaded: !!me.state.asCoachee
            });
        }, me);
        CoachingStore.on("retrieve-coachee-processes", function (processes) {
            me.setState({
                asCoachee: processes || [],
                loaded: !!me.state.asCoach
            });
        }, me);

        me.refreshProcesses();
    },
    componentWillUnmount: function componentWillUnmount() {
        CoachingStore.off(null, null, this);
    },
    refreshProcesses: function refreshProcesses() {
        CoachingStore.dispatch({
            action: CoachingStore.ACTION_RETRIEVE_COACH_PROCESSES
        });
        CoachingStore.dispatch({
            action: CoachingStore.ACTION_RETRIEVE_COACHEE_PROCESSES
        });
    },
    renderProcesses: function renderProcesses(asCoach) {
        return React.createElement(
            "table",
            { className: "ilv-table" },
            React.createElement(
                "thead",
                null,
                React.createElement(
                    "tr",
                    null,
                    React.createElement(
                        "th",
                        null,
                        asCoach ? Messages.get("LabelCoachee") : Messages.get("LabelCoach")
                    ),
                    React.createElement(
                        "th",
                        null,
                        Messages.get("LabelStatus")
                    ),
                    React.createElement(
                        "th",
                        null,
                        Messages.get("LabelCurrentSession")
                    ),
                    React.createElement("th", null)
                )
            ),
            React.createElement(
                "tbody",
                null,
                (asCoach ? this.state.asCoach : this.state.asCoachee).map(function (process, index) {
                    console.log(process);
                    var display = asCoach ? process.Coachee : process.Coach;
                    var statusEl;
                    if (process.Status == 0) {
                        statusEl = React.createElement(
                            "label",
                            { className: "ilv-tag ilv-tag-warning m-0" },
                            Messages.get("LabelNotStarted")
                        );
                    } else if (process.Status == 10) {
                        statusEl = React.createElement(
                            "label",
                            { className: "ilv-tag ilv-tag-success m-0" },
                            Messages.get("LabelFinished")
                        );
                    } else if (process.Status > 10) {
                        statusEl = React.createElement(
                            "label",
                            { className: "ilv-tag ilv-tag-danger m-0" },
                            Messages.get("LabelCanceled")
                        );
                    } else {
                        statusEl = React.createElement(
                            "label",
                            { className: "ilv-tag ilv-tag-info m-0" },
                            Messages.get("LabelInProgress")
                        );
                    }

                    return React.createElement(
                        "tr",
                        { key: "coaching-" + index },
                        React.createElement(
                            "td",
                            null,
                            React.createElement(
                                "div",
                                { className: "ilv-media ilv-media-middle" },
                                React.createElement(
                                    "div",
                                    { className: "ilv-media-left" },
                                    React.createElement("span", { className: "ilv-avatar-fluid ilv-avatar-fluid-sm", style: { backgroundImage: "url( " + (string(display.Image).isEmpty() ? UserIcon : display.Image) + " )" } })
                                ),
                                React.createElement(
                                    "div",
                                    { className: "ilv-media-body" },
                                    display.Name,
                                    " ",
                                    display.Surname
                                )
                            )
                        ),
                        React.createElement(
                            "td",
                            null,
                            statusEl
                        ),
                        React.createElement(
                            "td",
                            null,
                            React.createElement(
                                "h3",
                                { className: "m-0" },
                                process.Sessions.length
                            )
                        ),
                        React.createElement(
                            "td",
                            { className: "text-right" },
                            React.createElement(
                                Link,
                                { to: "/coaching/process/" + process.Id, className: "ilv-btn ilv-btn-clean", "data-toggle": "tooltip", title: Messages.get("LabelParticipate") },
                                React.createElement(
                                    "i",
                                    { className: "material-icons md-24" },
                                    "\uE037"
                                )
                            )
                        )
                    );
                })
            )
        );
    },
    render: function render() {
        if (!this.state.loaded) {
            return React.createElement(LoadingGauge, null);
        }
        return React.createElement(
            "div",
            { className: "container" },
            React.createElement(
                "h2",
                { className: "mb-5" },
                Messages.get("TextHello"),
                "\xA0",
                UserSession.get("user").Name,
                ",\xA0",
                Messages.get("TextWelcomeBack"),
                "!"
            ),
            this.state.asCoach.length <= 0 ? "" : React.createElement(
                "div",
                { className: "row mb-5" },
                React.createElement(
                    "div",
                    { className: "col" },
                    React.createElement(
                        "div",
                        { className: "ilv-media ilv-media-middle mb-4" },
                        React.createElement(
                            "div",
                            { className: "ilv-media-body" },
                            React.createElement(
                                "h4",
                                null,
                                Messages.get("TextCoachProgramsAsCoach"),
                                " (",
                                this.state.asCoach.length,
                                ")"
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-media-right" },
                            React.createElement("input", { className: "ilv-form-control", placeholder: Messages.get("LabelSearch") })
                        )
                    ),
                    this.renderProcesses(true)
                )
            ),
            this.state.asCoachee.length <= 0 ? "" : React.createElement(
                "div",
                { className: "row mb-5" },
                React.createElement(
                    "div",
                    { className: "col" },
                    React.createElement(
                        "div",
                        { className: "ilv-media ilv-media-middle mb-4" },
                        React.createElement(
                            "div",
                            { className: "ilv-media-body" },
                            React.createElement(
                                "h4",
                                null,
                                Messages.get("TextCoachProgramsAsCoachee"),
                                " (",
                                this.state.asCoachee.length,
                                ")"
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-media-right" },
                            React.createElement("input", { className: "ilv-form-control", placeholder: Messages.get("LabelSearch") })
                        )
                    ),
                    this.renderProcesses(false)
                )
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }

    __REACT_HOT_LOADER__.register(Link, "Link", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/user/coaching/CoachingProcesses.jsx");
}();

;