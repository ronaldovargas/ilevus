var React = require("react");
var Link = require("react-router").Link;
var UserSession = require("ilevus/jsx/core/store/UserSession.jsx");
var string = require("string");
var Toastr = require("toastr");

var Logo = require('ilevus/img/ilevus-logo-20px.png');
var LogoWhite = require('ilevus/img/ilevus-logo-white-20px.png');
var UserIcon = require("ilevus/img/user.png");

var Messages = require("ilevus/jsx/core/util/Messages.jsx");

module.exports = React.createClass({
    displayName: "exports",

    contextTypes: {
        admin: React.PropTypes.bool.isRequired,
        router: React.PropTypes.object
    },
    getInitialState: function getInitialState() {

        return {
            user: UserSession.get("user"),
            logged: !!UserSession.get("logged")
        };
    },
    componentWillMount: function componentWillMount() {
        var me = this;

        UserSession.on("update", function (session) {
            if (me.state && me.state.logged) {
                window.onbeforeunload = function (event) {
                    if (!this.state || !this.state.logged) {
                        return null;
                    }
                    var message = 'Important: Please click on \'Save\' button to leave this page.';
                    if (typeof event == 'undefined') {
                        event = window.event;
                    }
                    if (event) {
                        event.returnValue = message;
                    }
                    return message;
                };
            } else {
                window.onbeforeunload = null;
            }

            me.setState({
                user: session.get("user"),
                logged: true
            });
        }, me);
        UserSession.on("login", function (session) {
            me.setState({
                user: session.get("user"),
                logged: true
            });
        }, me);
        UserSession.on("logout", function (session) {
            window.onbeforeunload = null;
            me.setState({
                user: null,
                logged: false
            });
        }, me);

        UserSession.on("confirmationemail", function (code) {
            Toastr.success(Messages.get("TextEmailConfirmationSent"));
        }, me);
        UserSession.on("confirmationemailfail", function (msg) {
            Toastr.info(msg);
        }, me);
    },
    componentWillUnmount: function componentWillUnmount() {
        UserSession.off(null, null, this);
    },
    onLogout: function onLogout(evt) {
        evt.preventDefault();
        //if (confirm('Logout?')) {
        UserSession.dispatch({
            action: UserSession.ACTION_LOGOUT
        });
        //};
    },
    onSearch: function onSearch(evt) {
        evt.preventDefault();
        var term = this.refs['search-term'].value;
        this.refs['search-term'].value = "";
        if (!string(term).isEmpty()) this.context.router.push("/search/" + encodeURI(term));
    },
    confirmEmail: function confirmEmail(evt) {
        evt.preventDefault();
        UserSession.dispatch({
            action: UserSession.ACTION_CONFIRMATION_EMAIL
        });
    },
    getNomeURL: function getNomeURL() {
        var idUser = UserSession.get("user").Id;
        try {
            idUser = UserSession.get("user").Professional.Professional.NomeURL;
        } catch (ex) {
            console.log('utilizando id como profilepath');
        }

        return idUser || UserSession.get("user").Id;
    },
    render: function render() {
        return React.createElement(
            "nav",
            { className: "navbar navbar-toggleable-md navbar-light bg-faded fixed-top ilv-navbar" },
            React.createElement(
                "button",
                { className: "navbar-toggler navbar-toggler-right", type: "button", "data-toggle": "collapse", "data-target": "#navbar_menu", "aria-controls": "navbar_menu", "aria-expanded": "false", "aria-label": "Toggle navigation" },
                React.createElement(
                    "i",
                    { className: "ilv-icon material-icons" },
                    "\uE5D2"
                )
            ),
            React.createElement(
                Link,
                { to: "/home", className: "navbar-brand" },
                React.createElement("img", { src: Logo, alt: "ilevus" })
            ),
            React.createElement(
                "div",
                { className: "collapse navbar-collapse", id: "navbar_menu" },
                React.createElement(
                    "form",
                    { className: "form-inline mr-auto mt-2 mt-lg-0 ilv-navbar-search", onSubmit: this.onSearch, id: "js-navbar-search" },
                    React.createElement("input", { ref: "search-term", className: "form-control ilv-form-control ilv-navbar-search-input", type: "search" }),
                    React.createElement(
                        "button",
                        { className: "ilv-btn ilv-btn-icon ilv-btn-primary ilv-navbar-search-btn", type: "submit" },
                        React.createElement(
                            "i",
                            { className: "ilv-icon material-icons md-18" },
                            "\uE8B6"
                        ),
                        Messages.get("LabelSearch")
                    )
                ),
                this.state.logged ? React.createElement(
                    "ul",
                    { className: "my-2 my-lg-0 navbar-nav" },
                    React.createElement(
                        "li",
                        { className: "nav-item ilv-navbar-title-item" },
                        React.createElement(
                            Link,
                            { className: "nav-link ilv-btn ilv-btn-clean", title: Messages.get("LabelNotifications"), to: "notifications/timeline" },
                            React.createElement(
                                "span",
                                { className: "hidden-sm-up ilv-navbar-title-item-txt-1" },
                                Messages.get("LabelNotifications")
                            ),
                            React.createElement(
                                "i",
                                { className: "ilv-icon material-icons" },
                                "\uE7F4"
                            )
                        )
                    ),
                    React.createElement(
                        "li",
                        { className: "nav-item ilv-navbar-title-item" },
                        React.createElement(
                            Link,
                            { className: "nav-link ilv-btn ilv-btn-clean", title: Messages.get("LabelMessages"), to: "/notifications/messages" },
                            React.createElement(
                                "span",
                                { className: "hidden-sm-up ilv-navbar-title-item-txt-2" },
                                Messages.get("LabelMessages")
                            ),
                            React.createElement(
                                "i",
                                { className: "ilv-icon material-icons" },
                                "\uE0CA"
                            )
                        )
                    ),
                    React.createElement(
                        "li",
                        { className: "nav-item ilv-navbar-title-item" },
                        React.createElement(
                            Link,
                            { className: "nav-link ilv-btn ilv-btn-clean", title: Messages.get("LabelDashboard"), to: "/user/dashboard" },
                            React.createElement(
                                "span",
                                { className: "hidden-sm-up ilv-navbar-title-item-txt-3" },
                                Messages.get("LabelDashboard")
                            ),
                            React.createElement(
                                "i",
                                { className: "ilv-icon material-icons" },
                                "\uE871"
                            )
                        )
                    ),
                    React.createElement(
                        "li",
                        { className: "nav-item ilv-navbar-title-item" },
                        React.createElement(
                            "div",
                            { className: "dropdown" },
                            React.createElement(
                                "a",
                                { className: "nav-link ilv-btn ilv-btn-clean ilv-navbar-title-item ml-2 dropdown-toggle", id: "personal_submenu", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" },
                                React.createElement("span", { className: "ilv-avatar-fluid ilv-avatar-fluid-sm",
                                    style: {
                                        backgroundImage: "url(" + (string(this.state.user.Image).isEmpty() ? UserIcon : this.state.user.Image) + ")"
                                    } })
                            ),
                            React.createElement(
                                "div",
                                { className: "dropdown-menu dropdown-menu-right", "aria-labelledby": "personal_submenu" },
                                React.createElement(
                                    Link,
                                    { className: "dropdown-item", to: "/become-a-professional" },
                                    Messages.get("LabelProfessionalProfile")
                                ),
                                React.createElement("div", { className: "dropdown-divider" }),
                                React.createElement(
                                    Link,
                                    { className: "dropdown-item", to: "/profile/" + this.getNomeURL() },
                                    Messages.get("LabelViewProfile")
                                ),
                                React.createElement(
                                    Link,
                                    { className: "dropdown-item", to: "/user/profile" },
                                    Messages.get("LabelEditProfile")
                                ),
                                React.createElement(
                                    Link,
                                    { className: "dropdown-item", to: "/user/account" },
                                    Messages.get("LabelAccountConfig")
                                ),
                                React.createElement(
                                    Link,
                                    { className: "dropdown-item", to: "/user/account" },
                                    Messages.get("LabelChangeLanguage")
                                ),
                                !this.context.admin ? "" : React.createElement(
                                    Link,
                                    { className: "dropdown-item", to: "/admin/home" },
                                    Messages.get("LabelAdminPanel")
                                ),
                                this.state.user.EmailConfirmed ? "" : React.createElement(
                                    "a",
                                    { className: "dropdown-item", href: "", onClick: this.confirmEmail },
                                    Messages.get("LabelConfirmEmail")
                                ),
                                React.createElement(
                                    "a",
                                    { className: "dropdown-item", href: "", onClick: this.onLogout },
                                    Messages.get("LabelLogout")
                                )
                            )
                        )
                    )
                ) : React.createElement(
                    "ul",
                    { className: "my-2 my-lg-0 navbar-nav" },
                    React.createElement(
                        "li",
                        { className: "nav-item" },
                        React.createElement(
                            Link,
                            { className: "ilv-btn ilv-btn-clean", to: "/login" },
                            Messages.get("LabelSignIn")
                        ),
                        React.createElement(
                            Link,
                            { className: "ilv-btn ilv-btn-neutral", to: "/signup" },
                            Messages.get("LabelSignUp")
                        )
                    )
                )
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }

    __REACT_HOT_LOADER__.register(Link, "Link", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/widget/TopBar.jsx");
}();

;