"use strict";

var _ = require("underscore");
var S = require("string");
var marked = require("marked");
var React = require('react');

var Messages = require("ilevus/jsx/core/util/Messages.jsx");

module.exports = React.createClass({
    displayName: "exports",

    propTypes: {
        inline: React.PropTypes.bool,
        label: React.PropTypes.string.isRequired,
        value: React.PropTypes.string,
        onChange: React.PropTypes.func.isRequired,
        editable: React.PropTypes.bool.isRequired
    },
    getDefaultProps: function getDefaultProps() {
        return {
            editable: true,
            inline: false,
            onChange: _.noop
        };
    },
    getInitialState: function getInitialState() {
        return {
            editing: false
        };
    },
    tweakEditing: function tweakEditing(event) {
        event && event.preventDefault();
        this.setState(function (prev) {
            return { editing: !prev.editing };
        });
    },
    saveEdit: function saveEdit(event) {
        event && event.preventDefault();
        this.props.onChange(this.refs["textarea"].value);
        this.tweakEditing();
    },
    render: function render() {
        var value = S(this.props.value);
        if (this.props.inline) {
            return !this.state.editing ? React.createElement(
                "h4",
                null,
                this.props.label,
                ": \xA0",
                value.isEmpty() ? React.createElement(
                    "i",
                    null,
                    Messages.get("TextNoFilledContent")
                ) : value.s,
                "\xA0",
                this.props.editable ? React.createElement(
                    "a",
                    { className: "font-weight-bold", onClick: this.tweakEditing, href: "#" },
                    Messages.get('LabelEdit')
                ) : ""
            ) : React.createElement(
                "h4",
                null,
                this.props.label,
                ":",
                React.createElement("input", { className: "ilv-form-control mb-2", ref: "textarea", defaultValue: value.s }),
                React.createElement(
                    "button",
                    { className: "ilv-btn ilv-btn-primary", onClick: this.saveEdit },
                    Messages.get("LabelSave")
                ),
                React.createElement(
                    "button",
                    { className: "ilv-btn ilv-btn-sm ilv-btn-clean", onClick: this.tweakEditing },
                    Messages.get("LabelCancel")
                )
            );
        }
        return !this.state.editing ? React.createElement(
            "h4",
            null,
            this.props.label,
            ":",
            React.createElement("br", null),
            value.isEmpty() ? React.createElement(
                "i",
                null,
                Messages.get("TextNoFilledContent")
            ) : value.s,
            React.createElement("br", null),
            this.props.editable ? React.createElement(
                "a",
                { className: "font-weight-bold", onClick: this.tweakEditing, href: "#" },
                Messages.get('LabelEdit')
            ) : ""
        ) : React.createElement(
            "h4",
            null,
            this.props.label,
            ":",
            React.createElement("input", { className: "ilv-form-control mb-2", ref: "textarea", defaultValue: value.s }),
            React.createElement(
                "button",
                { className: "ilv-btn ilv-btn-primary", onClick: this.saveEdit },
                Messages.get("LabelSave")
            ),
            React.createElement(
                "button",
                { className: "ilv-btn ilv-btn-sm ilv-btn-clean", onClick: this.tweakEditing },
                Messages.get("LabelCancel")
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }
}();

;