var S = require("string");

var React = require("react");
var Link = require("react-router").Link;
var Toastr = require("toastr");

var NotificationStore = require("ilevus/jsx/core/store/notifications/Notification.jsx");

var UserSession = require("ilevus/jsx/core/store/UserSession.jsx");
var LoadingGauge = require("ilevus/jsx/core/widget/LoadingGauge.jsx");
var Messages = require("ilevus/jsx/core/util/Messages.jsx");

module.exports = React.createClass({
    displayName: "exports",

    contextTypes: {
        router: React.PropTypes.object
    },
    getInitialState: function getInitialState() {
        return {
            loading: true,
            notifications: [],
            filtro: false,
            opcaoFiltro: "0",
            naoLidas: 0
        };
    },
    componentDidMount: function componentDidMount() {
        var _this = this;

        try {
            var me = this;
            NotificationStore.on("notificationsuser", function (data) {
                setTimeout(function () {
                    //if (!this.state.notifications || data.length != this.state.notifications.length) {
                    me.setState({
                        notifications: data,
                        allNot: data,
                        loading: false
                    });
                    _this.qtdeNotifications();

                    //for (var i = 0; i <= 2; i++) {
                    //    this.state.notifications.push(this.state.allNot[i]);
                    //}
                    //}
                }, 10);
            }, me);

            var user = UserSession.get("user");

            NotificationStore.dispatch({
                action: NotificationStore.ACTION_USER_NOTIFICATIONS,
                data: { Id: user.Id }
            });
        } catch (e) {
            console.log(e);
        }
    },
    marcarLido: function marcarLido(element, id) {
        id.preventDefault();
        NotificationStore.dispatch({
            action: NotificationStore.ACTION_READ_NOTIFICATION,
            data: element
        });
    },
    deleteNotification: function deleteNotification(element, id) {
        id.preventDefault();
        NotificationStore.dispatch({
            action: NotificationStore.ACTION_DELETE_NOTIFICATION,
            data: element
        });
    },
    alterarFiltroExibicao: function alterarFiltroExibicao(event) {
        var user = UserSession.get("user");
        this.setState({
            filtro: event.target.value == "0" ? false : true,
            opcaoFiltro: event.target.value
        });
        NotificationStore.dispatch({
            action: NotificationStore.ACTION_USER_NOTIFICATIONS,
            data: { Id: user.Id }
        });
    },
    showAllNotifications: function showAllNotifications() {
        this.state.notifications = this.state.allNot;
    },
    qtdeNotifications: function qtdeNotifications() {
        var qtde = 0;
        for (var i = 0; i < this.state.notifications.length; i++) {
            if (!this.state.notifications[0].Status) qtde++;
        }

        this.setState({
            naoLidas: qtde
        });
    },
    itensFiltrados: function itensFiltrados() {
        if (!this.state.filtro) return this.state.notifications;

        var retorno = this.state.notifications.filter(function (value) {
            return value.Status == true;
        });

        return retorno;
    },
    componentWillUnmount: function componentWillUnmount() {
        NotificationStore.off(null, null, this);
    },
    renderNotification: function renderNotification() {
        var _this2 = this;

        var items;
        if (!this.state.notifications || this.state.notifications.length == 0) {
            return React.createElement(
                "div",
                { className: "ilv-notification ilv-notification-unread" },
                "nenhuma notifica\xE7\xE3o"
            );
        }

        items = this.state.notifications.map(function (contact, idx) {
            var dest = contact.Id;
            if (_this2.state.filtro && contact.Status) {
                return React.createElement("div", null);
            }

            return React.createElement(
                "div",
                { className: "ilv-notification " + (!contact.Status ? 'ilv-notification-unread' : '') },
                React.createElement(
                    Link,
                    { to: "/notifications/timeline_detalhe/" + dest, key: "item-" + idx },
                    React.createElement(
                        "div",
                        { className: "ilv-media ilv-media-middle" },
                        React.createElement(
                            "div",
                            { className: "ilv-media-body" },
                            React.createElement(
                                "p",
                                { className: "mb-0" },
                                contact.Subject
                            ),
                            React.createElement(
                                "small",
                                { className: "text-muted" },
                                contact.DateNotification
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-media-right" },
                            React.createElement(
                                "div",
                                { className: "dropdown" },
                                React.createElement(
                                    "button",
                                    { className: "ilv-btn ilv-btn-clean", "data-toggle": "dropdown" },
                                    React.createElement(
                                        "i",
                                        { className: "ilv-btn-icon material-icons md-24" },
                                        "\uE5D3"
                                    )
                                ),
                                React.createElement(
                                    "ul",
                                    { className: "dropdown-menu dropdown-menu-right" },
                                    React.createElement(
                                        "a",
                                        { href: "", onClick: _this2.marcarLido.bind(_this2, dest), className: "dropdown-item" },
                                        Messages.get("MarkAsRead")
                                    ),
                                    React.createElement(
                                        "a",
                                        { href: "", onClick: _this2.deleteNotification.bind(_this2, dest), className: "dropdown-item" },
                                        Messages.get("DeleteNotification")
                                    )
                                )
                            )
                        )
                    )
                )
            );
        });
        return React.createElement(
            "div",
            null,
            items
        );
    },
    render: function render() {

        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                { className: "ilv-media ilv-media-middle mb-4" },
                React.createElement(
                    "div",
                    { className: "ilv-media-body" },
                    React.createElement(
                        "h4",
                        null,
                        Messages.get("YourNotifications"),
                        " (",
                        this.state.naoLidas,
                        ")"
                    )
                ),
                React.createElement(
                    "div",
                    { className: "ilv-media-right" },
                    React.createElement(
                        "select",
                        { className: "ilv-form-control", value: this.state.opcaoFiltro, onChange: this.alterarFiltroExibicao },
                        React.createElement(
                            "option",
                            { value: "0" },
                            Messages.get("AllNotifications")
                        ),
                        React.createElement(
                            "option",
                            { value: "1" },
                            Messages.get("UnreadNotifications")
                        )
                    )
                )
            ),
            React.createElement(
                "div",
                { className: "ilv-notification-list" },
                this.renderNotification(),
                React.createElement(
                    "div",
                    { className: "text-center py-3" },
                    React.createElement(
                        "a",
                        { style: { cursor: "pointer" }, onClick: this.showAllNotifications },
                        Messages.get("LoadMoreNotifications")
                    )
                )
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }

    __REACT_HOT_LOADER__.register(Link, "Link", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/notifications/NotificationsTimeline.jsx");
}();

;