{"version":3,"sources":["src\\components\\molecules\\Field\\index.js"],"names":["Error","Wrapper","div","Field","error","name","invalid","label","type","props","inputProps","id","renderInputFirst","propTypes","string","isRequired","bool","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,QAAQ,kDAAR;AAAA;AAAA,iCAAN;;AAIA,IAAMC,UAAU,2BAAOC,GAAjB;AAAA;AAAA,mKAAN;;AAWA,IAAMC,QAAQ,SAARA,KAAQ,OAER;AAAA,MADJC,KACI,QADJA,KACI;AAAA,MADGC,IACH,QADGA,IACH;AAAA,MADSC,OACT,QADSA,OACT;AAAA,MADkBC,KAClB,QADkBA,KAClB;AAAA,MADyBC,IACzB,QADyBA,IACzB;AAAA,MADkCC,KAClC;;AACJ,MAAMC;AACJC,QAAIN,IADA,EACMA,UADN,EACYG,UADZ,EACkBF,gBADlB,EAC2B,oBAAuBD,IAAvB,UAD3B,IACkEI,KADlE,CAAN;AAGA,MAAMG,mBAAmBJ,SAAS,UAAT,IAAuBA,SAAS,OAAzD;AACA,SACE;AAAC,WAAD;AAAA;AACGI,wBAAoB,iDAAWF,UAAX,CADvB;AAEGH,aAAS;AAAA;AAAA,QAAO,SAASG,WAAWC,EAA3B;AAAgCJ;AAAhC,KAFZ;AAGGK,wBAAoB,iDAAWF,UAAX,CAHvB;AAIGJ,eAAWF,KAAX,IACC;AAAC,WAAD;AAAA,QAAO,IAAOC,IAAP,UAAP,EAA2B,MAAK,OAAhC,EAAwC,SAAQ,QAAhD;AACGD;AADH;AALJ,GADF;AAYD,CAnBD;;AAqBAD,MAAMU,SAAN,GAAkB;AAChBR,QAAM,oBAAUS,MAAV,CAAiBC,UADP;AAEhBT,WAAS,oBAAUU,IAFH;AAGhBZ,SAAO,oBAAUU,MAHD;AAIhBP,SAAO,oBAAUO,MAJD;AAKhBN,QAAM,oBAAUM;AALA,CAAlB;;AAQAX,MAAMc,YAAN,GAAqB;AACnBT,QAAM;AADa,CAArB;;eAIeL,K;;;;;;;;;gCAhDTH,K;;gCAIAC,O;;gCAWAE,K","file":"index.js","sourceRoot":"C:/Projetos/Nova pasta/ilevus/Ilevus/Views","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\n\r\nimport { Label, Input, Block } from 'components'\r\n\r\nconst Error = styled(Block)`\r\n  margin: 0.5rem 0 0;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  margin-bottom: 1rem;\r\n  input[type=\"checkbox\"],\r\n  input[type=\"radio\"] {\r\n    margin-right: 0.5rem;\r\n  }\r\n  label {\r\n    vertical-align: middle;\r\n  }\r\n`\r\n\r\nconst Field = ({\r\n  error, name, invalid, label, type, ...props\r\n}) => {\r\n  const inputProps = {\r\n    id: name, name, type, invalid, 'aria-describedby': `${name}Error`, ...props,\r\n  }\r\n  const renderInputFirst = type === 'checkbox' || type === 'radio'\r\n  return (\r\n    <Wrapper>\r\n      {renderInputFirst && <Input {...inputProps} />}\r\n      {label && <Label htmlFor={inputProps.id}>{label}</Label>}\r\n      {renderInputFirst || <Input {...inputProps} />}\r\n      {invalid && error &&\r\n        <Error id={`${name}Error`} role=\"alert\" palette=\"danger\">\r\n          {error}\r\n        </Error>\r\n      }\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nField.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  invalid: PropTypes.bool,\r\n  error: PropTypes.string,\r\n  label: PropTypes.string,\r\n  type: PropTypes.string,\r\n}\r\n\r\nField.defaultProps = {\r\n  type: 'text',\r\n}\r\n\r\nexport default Field\r\n"]}