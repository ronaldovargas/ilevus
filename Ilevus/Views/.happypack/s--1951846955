"use strict";

var _ = require("underscore");
var S = require("string");
var moment = require("moment");
var numeral = require("numeral");
var React = require('react');
var Link = require("react-router").Link;
var Toastr = require('toastr');

var Messages = require("ilevus/jsx/core/util/Messages.jsx");

var CoachingStore = require("ilevus/jsx/core/store/Coaching.jsx");
var UserSession = require("ilevus/jsx/core/store/UserSession.jsx");

var EditableTextArea = require("ilevus/jsx/core/widget/coaching/EditableTextArea.jsx");
var SessionCharts = require("ilevus/jsx/core/widget/coaching/SessionCharts.jsx");
var SessionHistory = require("ilevus/jsx/core/widget/coaching/SessionHistory.jsx");
var SessionTags = require("ilevus/jsx/core/widget/coaching/SessionTags.jsx");
var SessionTimer = require("ilevus/jsx/core/widget/coaching/SessionTimer.jsx");
var SessionTools = require("ilevus/jsx/core/widget/coaching/SessionTools.jsx");

var LoadingGauge = require("ilevus/jsx/core/widget/LoadingGauge.jsx");
var Modal = require("ilevus/jsx/core/widget/Modal.jsx");

var UserIcon = require("ilevus/img/user.png");

var CommitmentBg = "rgba(75,192,192,0.4)";
var FeedbackBg = "rgba(103, 58, 183, 0.2)";

var ProcessStep = "";

module.exports = React.createClass({
    displayName: "exports",

    contextTypes: {
        router: React.PropTypes.object
    },
    childContextTypes: {
        isCoach: React.PropTypes.bool,
        process: React.PropTypes.object
    },
    getChildContext: function getChildContext() {
        return {
            isCoach: this.state.isCoach,
            process: this.state.process
        };
    },
    getRoute: function getRoute(process, session) {
        return "/coaching/process/" + process + "/" + session;
    },
    getInitialState: function getInitialState() {
        return {
            isCoach: false,
            process: null,
            loading: true
        };
    },
    componentDidMount: function componentDidMount() {
        var _this = this;

        var me = this;
        CoachingStore.on("retrieve-coaching-process", function (process) {
            if (!_this.props.params.session) {
                me.context.router.replace(me.getRoute(me.props.params.id, process.Sessions.length - 1));
            }
            me.setState({
                isCoach: UserSession.get("user").Id === process.Coach.Id,
                process: process,
                lastModified: process.LastModified,
                loading: false
            });
            _.delay(_this.pollModifications, 5000);
        }, me);

        CoachingStore.on("process-modified", function (process) {
            me.setState({
                process: process,
                lastModified: process.LastModified
            });
            _.delay(_this.pollModifications, 5000);
        }, me);
        CoachingStore.on("process-not-modified", function () {
            _.delay(_this.pollModifications, 5000);
        }, me);

        CoachingStore.on("updated-session-field", function (process) {
            me.setState({
                process: process,
                lastModified: process.LastModified
            });
        }, me);

        CoachingStore.on("new-session", function (process) {
            me.setState({
                process: process,
                lastModified: process.LastModified
            });
            me.context.router.push(me.getRoute(me.props.params.id, process.Sessions.length - 1));
        }, me);
        CoachingStore.on("start-session", function (process) {
            me.setState({
                process: process,
                lastModified: process.LastModified
            });
        }, me);
        CoachingStore.on("finish-session", function (process) {
            me.setState({
                process: process,
                lastModified: process.LastModified
            });
        }, me);

        CoachingStore.on("change-session-process-step", function (process) {
            me.setState({
                process: process,
                lastModified: process.LastModified
            });
        }, me);

        CoachingStore.on("evaluate-session", function (process) {
            Toastr.success(Messages.get("TextEvaluationSaved"));
            me.setState({
                process: process,
                lastModified: process.LastModified
            });
        }, me);

        CoachingStore.dispatch({
            action: CoachingStore.ACTION_RETRIEVE_COACHING_PROCESS,
            data: me.props.params.id
        });
    },
    componentDidUpdate: function componentDidUpdate() {
        setTimeout(function () {
            jQuery('.breadcrumb .active').parent().scrollLeft(document.querySelector('.breadcrumb .active').offsetLeft);
        }, 2000);
    },
    componentWillUnmount: function componentWillUnmount() {
        CoachingStore.off(null, null, this);
    },
    componentWillReceiveProps: function componentWillReceiveProps(newProps, newContext) {
        if (this.props.params.id != newProps.params.id) {
            this.setState({ loading: true });
            CoachingStore.dispatch({
                action: CoachingStore.ACTION_RETRIEVE_COACHING_PROCESS,
                data: newProps.params.id
            });
        }
    },
    pollModifications: function pollModifications() {
        CoachingStore.dispatch({
            action: CoachingStore.ACTION_POLL_PROCESS_MODIFICATIONS,
            data: {
                id: this.props.params.id,
                lastModified: this.state.lastModified
            }
        });
    },
    updateProcessStep: function updateProcessStep(event) {
        var step = parseInt(event.target.value);
        CoachingStore.dispatch({
            action: CoachingStore.ACTION_CHANGE_SESSION_PROCESS_STEP,
            data: {
                Id: this.props.params.id,
                Session: parseInt(this.props.params.session),
                Step: step
            }
        });
    },
    updateSessionField: function updateSessionField(field, value) {
        CoachingStore.dispatch({
            action: CoachingStore.ACTION_UPDATE_SESSION_FIELD,
            data: {
                ProcessId: this.props.params.id,
                Session: parseInt(this.props.params.session),
                Field: field,
                Value: value
            }
        });
    },
    objectiveChange: function objectiveChange(newValue) {
        this.state.process.Sessions[parseInt(this.props.params.session)].Objectives = newValue;
        this.forceUpdate();
        this.updateSessionField("Objectives", newValue);
    },
    coacheeCommentsChange: function coacheeCommentsChange(newValue) {
        this.state.process.Sessions[parseInt(this.props.params.session)].CoacheeComments = newValue;
        this.forceUpdate();
        this.updateSessionField("CoacheeComments", newValue);
    },
    coachCommentsChange: function coachCommentsChange(newValue) {
        this.state.process.Sessions[parseInt(this.props.params.session)].CoachComments = newValue;
        this.forceUpdate();
        this.updateSessionField("CoachComments", newValue);
    },
    selectSession: function selectSession(index) {
        this.context.router.push(this.getRoute(this.props.params.id, index));
    },
    saveEvaluation: function saveEvaluation(event) {
        event && event.preventDefault();
        var me = this;
        CoachingStore.dispatch({
            action: CoachingStore.ACTION_EVALUATE_SESSION,
            data: {
                Id: me.props.params.id,
                Session: parseInt(this.props.params.session),
                Rating: this.refs['rate-feedback'].valueAsNumber,
                Commitment: this.refs['rate-commitment'].valueAsNumber
            }
        });
    },
    render: function render() {
        if (this.state.loading) {
            return React.createElement(LoadingGauge, null);
        }

        if (this.props.children) {
            return this.props.children;
        }

        var process = this.state.process,
            isCoach = this.state.isCoach,
            coach = process.Coach,
            coachee = process.Coachee,
            other = isCoach ? coachee : coach,
            sessionIndex = parseInt(this.props.params.session),
            session = process.Sessions[sessionIndex],
            inProgress = session.Status > 0 && session.Status < 10,
            currentSession = process.Sessions.length == sessionIndex + 1,
            latestFinished = process.Sessions[process.Sessions.length - 1].Status >= 10;
        return React.createElement(
            "div",
            { className: "container my-5" },
            React.createElement(
                "div",
                { className: "row" },
                React.createElement(
                    "div",
                    { className: "col-xs-12 col-sm-8" },
                    React.createElement(
                        "div",
                        { className: "row mb-5" },
                        React.createElement(
                            "div",
                            { className: "col" },
                            React.createElement(
                                "div",
                                { className: "ilv-media" },
                                React.createElement(
                                    "div",
                                    { className: "ilv-media-left mr-4" },
                                    React.createElement("div", { className: "ilv-avatar-fluid ilv-avatar-fluid-xl",
                                        style: { backgroundImage: "url(" + (S(other.Image).isEmpty() ? UserIcon : other.Image) + ")" } })
                                ),
                                React.createElement(
                                    "div",
                                    { className: "ilv-media-body" },
                                    React.createElement(
                                        "h1",
                                        { className: "ilv-font-weight-bold" },
                                        Messages.get('LabelSession'),
                                        ": ",
                                        sessionIndex + 1
                                    ),
                                    React.createElement(
                                        "p",
                                        { className: "ilv-text-large" },
                                        isCoach ? Messages.get("TextCoachingSessionTo") : Messages.get("TextCoachingSessionBy"),
                                        " ",
                                        React.createElement(
                                            "em",
                                            null,
                                            other.Name,
                                            " ",
                                            other.Surname
                                        ),
                                        "."
                                    )
                                ),
                                React.createElement(
                                    "div",
                                    { className: "ilv-media-right" },
                                    React.createElement(
                                        "div",
                                        { className: "dropdown", style: { display: 'inline-block' } },
                                        React.createElement(
                                            "button",
                                            { className: "ilv-btn ilv-btn-clean", "data-toggle": "dropdown" },
                                            React.createElement(
                                                "i",
                                                { className: "ilv-icon material-icons md-24" },
                                                "\uE2C4"
                                            )
                                        ),
                                        React.createElement(
                                            "div",
                                            { className: "dropdown-menu dropdown-menu-right" },
                                            React.createElement(
                                                "a",
                                                { className: "dropdown-item", href: "#" },
                                                Messages.get("LabelDownloadSession")
                                            ),
                                            React.createElement(
                                                "a",
                                                { className: "dropdown-item", href: "#" },
                                                Messages.get("LabelDownloadAllSessions")
                                            )
                                        )
                                    )
                                )
                            ),
                            React.createElement("hr", { className: "mb-3" }),
                            React.createElement(
                                "div",
                                { className: "ilv-media ilv-media-middle" },
                                React.createElement(
                                    "div",
                                    { className: "ilv-media-body", style: { width: '100%' } },
                                    isCoach ? React.createElement(
                                        "select",
                                        { className: "ilv-form-control ilv-form-control-sm", defaultValue: session.ProcessStep, onChange: this.updateProcessStep },
                                        React.createElement(
                                            "div",
                                            { className: "ilv-media-left mr-3" },
                                            React.createElement(
                                                "span",
                                                { className: "ilv-font-weight-semibold" },
                                                Messages.get('LabelRelatedProcessStep'),
                                                ":"
                                            )
                                        ),
                                        process.Steps.map(function (step, index) {
                                            return React.createElement(
                                                "option",
                                                { value: index, key: "process-step-" + index },
                                                index + 1,
                                                " - ",
                                                step.Label
                                            );
                                        })
                                    ) : React.createElement(
                                        "div",
                                        { className: "dvBreadcrumb", style: { overflowX: 'auto' } },
                                        React.createElement(
                                            "ul",
                                            { className: "breadcrumb mb-3 breadcrumb-scroll" },
                                            process.Steps.map(function (step1, index1) {
                                                ProcessStep = session.ProcessStep == index1 ? "active" : session.ProcessStep > index1 ? "completed" : "";
                                                return React.createElement(
                                                    "li",
                                                    { className: ProcessStep },
                                                    React.createElement(
                                                        "a",
                                                        { href: "javascript:;", title: step1.Label },
                                                        step1.Label.length > 20 ? step1.Label.substring(0, 20) + ' ...' : step1.Label
                                                    )
                                                );
                                            })
                                        )
                                    )
                                )
                            ),
                            React.createElement("hr", { className: "mt-3 mb-5" }),
                            React.createElement(EditableTextArea, {
                                label: Messages.get('LabelSessionObjectives'),
                                value: session.Objectives,
                                editable: isCoach && inProgress,
                                onChange: this.objectiveChange }),
                            React.createElement(SessionTags, { ref: "timer",
                                process: process,
                                session: session,
                                sessionIndex: sessionIndex,
                                isCoach: isCoach })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "row mb-5" },
                        React.createElement(SessionTools, { className: "col", isCoach: isCoach, processId: this.props.params.id, session: session, sessionIndex: sessionIndex })
                    ),
                    React.createElement(
                        "div",
                        { className: "row mb-5" },
                        React.createElement(
                            "div",
                            { className: "col" },
                            React.createElement(EditableTextArea, { label: Messages.get('LabelMyComments'),
                                value: isCoach ? session.CoachComments : session.CoacheeComments,
                                editable: inProgress,
                                onChange: isCoach ? this.coachCommentsChange : this.coacheeCommentsChange })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "row mb-5" },
                        React.createElement(
                            "div",
                            { className: "col" },
                            React.createElement(EditableTextArea, { label: Messages.get(isCoach ? 'LabelCoacheeComments' : 'LabelCoachComments'),
                                value: isCoach ? session.CoacheeComments : session.CoachComments,
                                editable: false })
                        )
                    )
                ),
                React.createElement(
                    "div",
                    { className: "col-sm-4" },
                    React.createElement(SessionTimer, { ref: "timer",
                        process: process,
                        session: session,
                        isCoach: isCoach
                    }),
                    !isCoach && session.Status >= 10 ? React.createElement(
                        "div",
                        { className: "mb-5 text-center" },
                        React.createElement(
                            "div",
                            { className: "row" },
                            React.createElement(
                                "div",
                                { className: "col-md-6" },
                                React.createElement(
                                    "div",
                                    { className: "ilv-card", style: { backgroundColor: CommitmentBg } },
                                    React.createElement(
                                        "div",
                                        { className: "ilv-card-body text-center" },
                                        React.createElement(
                                            "span",
                                            null,
                                            Messages.get("LabelCommitment")
                                        ),
                                        React.createElement("input", { className: "ilv-form-control mt-2", type: "number", ref: "rate-commitment", defaultValue: session.Commitment, min: "0", max: "10" })
                                    )
                                )
                            ),
                            React.createElement(
                                "div",
                                { className: "col-md-6" },
                                React.createElement(
                                    "div",
                                    { className: "ilv-card", style: { backgroundColor: FeedbackBg } },
                                    React.createElement(
                                        "div",
                                        { className: "ilv-card-body text-center" },
                                        React.createElement(
                                            "span",
                                            null,
                                            Messages.get("LabelFeedback")
                                        ),
                                        React.createElement("input", { className: "ilv-form-control mt-2", type: "number", ref: "rate-feedback", defaultValue: session.Rating, min: "0", max: "10" })
                                    )
                                )
                            )
                        ),
                        React.createElement(
                            "button",
                            { className: "ilv-btn ilv-btn-sm ilv-btn-primary", onClick: this.saveEvaluation },
                            Messages.get("LabelSave")
                        )
                    ) : "",
                    React.createElement(SessionCharts, { process: process }),
                    React.createElement(SessionHistory, { sessions: process.Sessions, current: sessionIndex, onChange: this.selectSession })
                )
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }

    __REACT_HOT_LOADER__.register(Link, "Link", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/user/coaching/SessionDetails.jsx");

    __REACT_HOT_LOADER__.register(CommitmentBg, "CommitmentBg", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/user/coaching/SessionDetails.jsx");

    __REACT_HOT_LOADER__.register(FeedbackBg, "FeedbackBg", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/user/coaching/SessionDetails.jsx");

    __REACT_HOT_LOADER__.register(ProcessStep, "ProcessStep", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/user/coaching/SessionDetails.jsx");
}();

;