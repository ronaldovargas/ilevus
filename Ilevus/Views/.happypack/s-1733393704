"use strict";

var moment = require("moment");
var React = require("react");
var S = require("string");
var Toastr = require("toastr");

var UserSession = require("ilevus/jsx/core/store/UserSession.jsx");
var ScheduleStore = require("ilevus/jsx/core/store/Schedule.jsx");

var LoadingGauge = require("ilevus/jsx/core/widget/LoadingGauge.jsx");
var Modal = require("ilevus/jsx/core/widget/Modal.jsx");

var Messages = require("ilevus/jsx/core/util/Messages.jsx");

module.exports = React.createClass({
    displayName: "exports",

    propTypes: {
        config: React.PropTypes.array.isRequired,
        interval: React.PropTypes.number.isRequired
    },
    getDefaultProps: function getDefaultProps() {
        return {
            interval: null
        };
    },
    getInitialState: function getInitialState() {
        var config = this.props.config || [];
        var windows = 24 * 60 / this.props.interval;
        if (config.length < windows) {
            for (var i = config.length; i < windows; i++) {
                config.push([false, false, false, false, false, false, false]);
            }
        }
        while (config.length > windows) {
            config.pop();
        }

        return {
            config: config,
            interval: this.props.interval
        };
    },
    componentDidMount: function componentDidMount() {
        var me = this;
    },
    componentWillUnmount: function componentWillUnmount() {
        ScheduleStore.off(null, null, this);
    },
    componentWillReceiveProps: function componentWillReceiveProps(newProps) {
        if (this.props.interval != newProps.interval) {
            var config = this.state.config || [];
            var windows = 24 * 60 / newProps.interval;
            if (config.length < windows) {
                for (var i = config.length; i < windows; i++) {
                    config.push([false, false, false, false, false, false, false]);
                }
            }
            while (config.length > windows) {
                config.pop();
            }
            this.setState({
                interval: newProps.interval,
                config: config
            });
        }
    },
    getConfigs: function getConfigs() {
        return this.state.config;
    },
    onCheck: function onCheck(hour, day, event) {
        this.state.config[hour][day] = event.target.checked;
        this.forceUpdate();
    },
    renderCalendarForConfig: function renderCalendarForConfig() {
        var _this = this;

        var days = [];
        for (var i = 0; i < 7; i++) {
            days.push(moment().day(i));
        }
        var firstHour = moment().hours(0).minutes(0);
        return React.createElement(
            "table",
            { className: "ilv-schedule" },
            React.createElement(
                "thead",
                null,
                React.createElement(
                    "tr",
                    null,
                    React.createElement(
                        "th",
                        null,
                        Messages.get("LabelHour")
                    ),
                    days.map(function (day, idx) {
                        return React.createElement(
                            "th",
                            { key: "day-header-" + idx },
                            React.createElement(
                                "div",
                                null,
                                day.format("ddd")
                            )
                        );
                    })
                )
            ),
            React.createElement(
                "tbody",
                null,
                this.state.config.map(function (daysChecked, hour) {
                    var hourAux = moment(firstHour).minutes(_this.state.interval * hour);
                    return React.createElement(
                        "tr",
                        { key: "hour-row-" + hour },
                        React.createElement(
                            "td",
                            null,
                            hourAux.format("HH:mm")
                        ),
                        daysChecked.map(function (checked, day) {
                            return React.createElement(
                                "td",
                                { key: "hour-" + hour + "-day-" + day, className: checked ? "checked" : "" },
                                React.createElement("input", { className: "ilv-form-control", type: "checkbox", ref: "checkbox-" + hour + "-" + day, checked: checked, onChange: _this.onCheck.bind(_this, hour, day) })
                            );
                        })
                    );
                })
            )
        );
    },
    render: function render() {
        return React.createElement(
            "div",
            null,
            this.renderCalendarForConfig()
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }
}();

;