
var _ = require('underscore');
var $ = require('jquery');
var React = require('react');
var ReactDOM = require('react-dom');

var Messages = require("ilevus/jsx/core/util/Messages.jsx");

var EL = document.getElementById("main-global-modal");

var AlertModal = React.createClass({
	displayName: 'AlertModal',
	render: function render() {
		return React.createElement(
			'div',
			{ className: 'modal-dialog modal-sm fade in' },
			React.createElement(
				'div',
				{ className: 'modal-content' },
				React.createElement(
					'div',
					{ className: 'modal-header' },
					React.createElement(
						'a',
						{ className: 'close', 'data-dismiss': 'modal', 'aria-label': 'Close' },
						React.createElement(
							'span',
							{ 'aria-hidden': 'true' },
							'\xD7'
						)
					),
					React.createElement(
						'h4',
						{ className: 'modal-title', id: 'myModalLabel' },
						this.props.title
					)
				),
				React.createElement(
					'div',
					{ className: 'modal-body' },
					this.props.message
				),
				React.createElement(
					'div',
					{ className: 'modal-footer' },
					React.createElement(
						'button',
						{ type: 'button', className: 'ilv-btn ilv-btn-primary ilv-btn-sm', 'data-dismiss': 'modal' },
						'Ok'
					)
				)
			)
		);
	}
});

var ConfirmModal = React.createClass({
	displayName: 'ConfirmModal',
	render: function render() {
		return React.createElement(
			'div',
			{ className: 'modal-dialog modal-sm' },
			React.createElement(
				'div',
				{ className: 'modal-content' },
				React.createElement(
					'div',
					{ className: 'modal-header' },
					React.createElement(
						'button',
						{ type: 'button', className: 'close', 'data-dismiss': 'modal', 'aria-label': 'Close' },
						React.createElement(
							'span',
							{ 'aria-hidden': 'true' },
							'\xD7'
						)
					),
					React.createElement(
						'h4',
						{ className: 'modal-title', id: 'myModalLabel' },
						this.props.title
					)
				),
				React.createElement(
					'div',
					{ className: 'modal-body' },
					this.props.message
				),
				React.createElement(
					'div',
					{ className: 'modal-footer' },
					React.createElement(
						'button',
						{ type: 'button', className: 'ilv-btn ilv-btn-sm ilv-btn-clean', 'data-dismiss': 'modal' },
						Messages.get("ActionCancel")
					),
					React.createElement(
						'button',
						{ type: 'button', className: 'ilv-btn ilv-btn-sm ilv-btn-primary', onClick: this.props.onConfirm },
						Messages.get("ActionConfirm")
					)
				)
			)
		);
	}
});

var DeleteConfirmModal = React.createClass({
	displayName: 'DeleteConfirmModal',
	getDefaultProps: function getDefaultProps() {
		return {
			text: "VocÃª tem certeza que deseja excluir este registro?",
			confirmText: "Excluir",
			declineText: "Cancelar"
		};
	},
	render: function render() {
		return React.createElement(
			'div',
			{ className: 'modal-dialog modal-sm' },
			React.createElement(
				'div',
				{ className: 'modal-content' },
				React.createElement(
					'div',
					{ className: 'modal-header ilevus-modal-header' },
					React.createElement(
						'button',
						{ type: 'button', className: 'close', 'data-dismiss': 'modal', 'aria-label': 'Close' },
						React.createElement(
							'span',
							{ 'aria-hidden': 'true' },
							'\xD7'
						)
					),
					React.createElement(
						'h4',
						{ className: 'modal-title', id: 'myModalLabel' },
						'Aten\xE7\xE3o'
					)
				),
				React.createElement(
					'div',
					{ className: 'modal-body ilevus-modal-body' },
					React.createElement(
						'p',
						null,
						this.props.text
					)
				),
				React.createElement(
					'div',
					{ className: 'modal-footer ilevus-modal-footer' },
					React.createElement(
						'button',
						{ type: 'button', className: 'btn btn-sm btn-default', 'data-dismiss': 'modal' },
						this.props.declineText
					),
					React.createElement(
						'button',
						{ type: 'button', className: 'btn btn-sm btn-primary', onClick: this.props.onConfirm },
						this.props.confirmText
					)
				)
			)
		);
	}
});

var ReadTextModal = React.createClass({
	displayName: 'ReadTextModal',
	onConfirmWrapper: function onConfirmWrapper(evt) {
		var me = this,
		    value = me.refs['text-input'].value;
		_.defer(function () {
			me.props.onConfirm(value);
		});
	},
	render: function render() {
		return React.createElement(
			'div',
			{ className: 'modal-dialog modal-sm' },
			React.createElement(
				'div',
				{ className: 'modal-content' },
				React.createElement(
					'div',
					{ className: 'modal-header' },
					React.createElement(
						'button',
						{ type: 'button', className: 'close', 'data-dismiss': 'modal', 'aria-label': 'Close' },
						React.createElement(
							'span',
							{ 'aria-hidden': 'true' },
							'\xD7'
						)
					),
					React.createElement(
						'h4',
						{ className: 'modal-title', id: 'myModalLabel' },
						this.props.title
					)
				),
				React.createElement(
					'div',
					{ className: 'modal-body' },
					React.createElement(
						'p',
						null,
						this.props.message
					),
					React.createElement('input', { type: 'text', className: 'form-control', ref: 'text-input' })
				),
				React.createElement(
					'div',
					{ className: 'modal-footer' },
					React.createElement(
						'button',
						{ type: 'button', className: 'btn btn-sm btn-default', 'data-dismiss': 'modal' },
						'Cancelar'
					),
					React.createElement(
						'button',
						{ type: 'button', className: 'btn btn-sm btn-primary', onClick: this.onConfirmWrapper },
						'Confirmar'
					)
				)
			)
		);
	}
});

var FileUploadModal = React.createClass({
	displayName: 'FileUploadModal',
	render: function render() {
		return React.createElement(
			'div',
			{ className: 'modal-dialog' },
			React.createElement(
				'div',
				{ className: 'modal-content' },
				React.createElement(
					'div',
					{ className: 'modal-header' },
					React.createElement(
						'button',
						{ type: 'button', className: 'close', 'data-dismiss': 'modal', 'aria-label': 'Close' },
						React.createElement(
							'span',
							{ 'aria-hidden': 'true' },
							'\xD7'
						)
					),
					React.createElement(
						'h4',
						{ className: 'modal-title', id: 'myModalLabel' },
						this.props.title
					)
				),
				React.createElement(
					'div',
					{ className: 'modal-body' },
					React.createElement(
						'div',
						null,
						this.props.message
					),
					React.createElement('input', { type: 'file', name: 'file', className: 'form-control', ref: 'file-upload-field', id: 'file-upload-field' })
				),
				React.createElement(
					'div',
					{ className: 'panel-footer' },
					React.createElement(
						'div',
						{ id: 'file-upload-progress', className: 'progress', style: { border: '1px solid #ccc' } },
						React.createElement('div', { className: 'progress-bar progress-bar-success' })
					)
				)
			)
		);
	}
});

var LargeContentModal = React.createClass({
	displayName: 'LargeContentModal',
	render: function render() {
		return React.createElement(
			'div',
			{ className: 'modal-dialog modal-lg', role: 'document' },
			React.createElement(
				'div',
				{ className: 'modal-content' },
				React.createElement(
					'div',
					{ className: 'modal-header' },
					React.createElement(
						'button',
						{ type: 'button', className: 'close', 'data-dismiss': 'modal', 'aria-label': 'Close' },
						React.createElement(
							'span',
							{ 'aria-hidden': 'true' },
							'\xD7'
						)
					),
					React.createElement(
						'h4',
						{ className: 'modal-title' },
						this.props.title
					)
				),
				React.createElement(
					'div',
					{ className: 'modal-body' },
					this.props.children
				),
				React.createElement(
					'div',
					{ className: 'modal-footer' },
					React.createElement(
						'button',
						{ type: 'button', className: 'btn btn-secondary', 'data-dismiss': 'modal' },
						'Ok'
					)
				)
			)
		);
	}
});

var MediumModal = React.createClass({
	displayName: 'MediumModal',
	getDefaultProps: function getDefaultProps() {
		return {
			title: null
		};
	},
	render: function render() {
		return React.createElement(
			'div',
			{ className: 'modal-dialog modal-md' },
			React.createElement(
				'div',
				{ className: 'modal-content' },
				React.createElement(
					'div',
					{ className: 'modal-header ilevus-modal-header' },
					React.createElement(
						'button',
						{ type: 'button', className: 'close', 'data-dismiss': 'modal', 'aria-label': 'Close' },
						React.createElement(
							'span',
							{ 'aria-hidden': 'true' },
							'\xD7'
						)
					),
					React.createElement(
						'h4',
						{ className: 'modal-title', id: 'myModalLabel' },
						this.props.title
					)
				),
				React.createElement(
					'div',
					{ className: 'modal-body ilevus-modal-body' },
					this.props.children
				)
			)
		);
	}
});

var Modal = {
	$el: EL,
	hide: function hide() {
		var _this = this;

		$(this.$el).modal("hide");
		_.defer(function () {
			ReactDOM.render(React.createElement('div', null), _this.$el);
		});
	},
	show: function show() {
		$(this.$el).modal("show");
	},
	detailsModal: function detailsModal(title, Components) {
		ReactDOM.render(React.createElement(
			MediumModal,
			{ title: title },
			Components
		), this.$el);
		$(this.$el).modal('show');
	},
	largeModal: function largeModal(title, Components) {
		ReactDOM.render(React.createElement(
			LargeContentModal,
			{ title: title },
			Components
		), this.$el);
		$(this.$el).modal('show');
	},
	alert: function alert(title, msg) {
		ReactDOM.render(React.createElement(AlertModal, { title: title, message: msg }), this.$el);
		$(this.$el).modal('show');
	},
	confirm: function confirm(title, msg, cb) {
		ReactDOM.render(React.createElement(ConfirmModal, { onConfirm: cb, title: title, message: msg }), this.$el);
		$(this.$el).modal('show');
	},
	deleteConfirm: function deleteConfirm(cb) {
		ReactDOM.render(React.createElement(DeleteConfirmModal, { onConfirm: cb }), this.$el);
		$(this.$el).modal('show');
	},
	readText: function readText(title, msg, cb) {
		ReactDOM.render(React.createElement(ReadTextModal, { title: title, message: msg, onConfirm: cb }), this.$el);
		$(this.$el).modal('show');
	},
	uploadFile: function uploadFile(title, msg, url, onSuccess, onFailure) {
		var me = this;
		ReactDOM.render(React.createElement(FileUploadModal, { title: title, message: msg }), this.$el);
		this.show();

		$('#file-upload-field').fileupload({
			url: url,
			dataType: 'json',
			done: function done(evt, xhr) {
				if (evt.type == 'fileuploaddone') {
					if (typeof onSuccess == 'function') onSuccess.call(me, evt, xhr);
				} else {
					if (typeof onFailure == 'function') onFailure.call(me, evt, xhr);
				}
			},
			error: function error(arg1, arg2) {
				if (typeof onFailure == 'function') onFailure.call(me, arg1, arg2);
			},
			progressall: function progressall(e, data) {
				var progress = parseInt(data.loaded / data.total * 100, 10);
				$('#file-upload-progress .progress-bar').css('width', progress + '%');
			}
		}).prop('disabled', !$.support.fileInput).parent().addClass($.support.fileInput ? undefined : 'disabled');
	}
};

module.exports = Modal;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(EL, 'EL', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/widget/Modal.jsx');

	__REACT_HOT_LOADER__.register(AlertModal, 'AlertModal', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/widget/Modal.jsx');

	__REACT_HOT_LOADER__.register(ConfirmModal, 'ConfirmModal', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/widget/Modal.jsx');

	__REACT_HOT_LOADER__.register(DeleteConfirmModal, 'DeleteConfirmModal', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/widget/Modal.jsx');

	__REACT_HOT_LOADER__.register(ReadTextModal, 'ReadTextModal', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/widget/Modal.jsx');

	__REACT_HOT_LOADER__.register(FileUploadModal, 'FileUploadModal', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/widget/Modal.jsx');

	__REACT_HOT_LOADER__.register(LargeContentModal, 'LargeContentModal', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/widget/Modal.jsx');

	__REACT_HOT_LOADER__.register(MediumModal, 'MediumModal', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/widget/Modal.jsx');

	__REACT_HOT_LOADER__.register(Modal, 'Modal', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/widget/Modal.jsx');
}();

;