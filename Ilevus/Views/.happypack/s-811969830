'use strict';

var S = require('string');
var marked = require("marked");
var React = require('react');
var Toastr = require("toastr");
var Messages = require("ilevus/jsx/core/util/Messages.jsx");
var Modal = require("ilevus/jsx/core/widget/Modal.jsx");

var WheelOfLifeStore = require("ilevus/jsx/core/store/coaching/WheelOfLife.jsx");
var UserSession = require("ilevus/jsx/core/store/UserSession.jsx");

var EditableText = require("ilevus/jsx/core/widget/coaching/EditableText.jsx");
var EditableTextArea = require("ilevus/jsx/core/widget/coaching/EditableTextArea.jsx");

module.exports = React.createClass({
    displayName: 'exports',
    getInitialState: function getInitialState() {
        return {
            changed: false,
            field: 0,
            configs: UserSession.get("user").Professional.Professional.CoachingToolsConfigs.WheelOfLifeDefaults
        };
    },
    componentDidMount: function componentDidMount() {
        var me = this;

        window.onbeforeunload = me.beforeClose;

        WheelOfLifeStore.on("save-configuration", function (data) {
            Toastr.remove();
            Toastr.success(Messages.get("TextDataSavedSuccess"));
            me.setState({
                changed: false,
                configs: data
            });
        }, me);
    },
    componentWillUnmount: function componentWillUnmount() {
        window.onbeforeunload = undefined;
        WheelOfLifeStore.off(null, null, this);
    },
    beforeClose: function beforeClose() {
        if (this.state.changed) return "Tem certeza?";
        return undefined;
    },
    saveConfigs: function saveConfigs(event) {
        event && event.preventDefault();
        WheelOfLifeStore.dispatch({
            action: WheelOfLifeStore.ACTION_SAVE_CONFIGURATION,
            data: this.state.configs
        });
    },
    changeField: function changeField(event) {
        this.setState({
            field: event.target.value
        });
    },
    instructionsChange: function instructionsChange(content) {
        this.state.configs[this.state.field].Instructions = content;
        this.setState({ changed: true });
    },
    labelChange: function labelChange(content) {
        this.state.configs[this.state.field].Label = content;
        this.setState({ changed: true });
    },
    addField: function addField(event) {
        event && event.preventDefault();
        this.state.configs.push({
            Label: Messages.get("LabelName"),
            Instructions: ""
        });
        this.setState({
            changed: true,
            field: this.state.configs.length - 1
        });
    },
    removeField: function removeField(index, event) {
        event && event.preventDefault();
        if (this.state.configs.length == 0) return;
        var me = this;
        Modal.deleteConfirm(function () {
            Modal.hide();
            me.state.configs.splice(index, 1);
            me.setState({
                changed: true,
                field: me.state.field == 0 ? 0 : me.state.field - 1
            });
        });
    },
    previousField: function previousField(event) {
        event && event.preventDefault();
        var field = this.state.field - 1;
        if (this.state.field == 0) {
            field = this.state.configs.length - 1;
        }
        this.setState({
            field: field
        });
    },
    nextField: function nextField(event) {
        event && event.preventDefault();
        var field = this.state.field + 1;
        if (this.state.field == this.state.configs.length - 1) {
            field = 0;
        }
        this.setState({
            field: field
        });
    },
    renderField: function renderField(fieldIndex) {
        var field = this.state.configs[fieldIndex];
        return React.createElement(
            'div',
            { className: 'col mb-3' },
            React.createElement(EditableText, {
                inline: true,
                label: Messages.get('LabelField'),
                value: field.Label,
                editable: true,
                onChange: this.labelChange }),
            React.createElement(EditableTextArea, {
                label: Messages.get('LabelInstructions'),
                value: field.Instructions,
                editable: true,
                onChange: this.instructionsChange }),
            React.createElement(
                'div',
                { className: 'mt-3' },
                React.createElement(
                    'a',
                    { className: 'font-weight-bold mr-4', href: '#', onClick: this.previousField },
                    '\u2190 ',
                    Messages.get("LabelPrevious")
                ),
                React.createElement(
                    'a',
                    { className: 'font-weight-bold mr-4', href: '#', onClick: this.nextField },
                    Messages.get("LabelNext"),
                    ' \u2192'
                ),
                React.createElement(
                    'button',
                    { className: 'ilv-btn ilv-btn-error', onClick: this.removeField.bind(this, fieldIndex), title: Messages.get("LabelRemoveField") },
                    Messages.get("LabelRemoveField")
                )
            )
        );
    },
    render: function render() {
        return React.createElement(
            'div',
            null,
            React.createElement(
                'div',
                { className: 'row mb-2' },
                React.createElement(
                    'div',
                    { className: 'col' },
                    React.createElement(
                        'fieldset',
                        { className: 'ilv-form-group' },
                        React.createElement(
                            'div',
                            { className: 'ilv-input-group mb-5' },
                            React.createElement(
                                'label',
                                { className: 'ilv-form-label' },
                                Messages.get("LabelFields")
                            ),
                            React.createElement(
                                'div',
                                { className: 'ilv-input-group-btn' },
                                React.createElement(
                                    'button',
                                    { className: 'ilv-btn ilv-btn-lg ilv-btn-icon ilv-btn-primary', onClick: this.saveConfigs, title: Messages.get("LabelSave"), disabled: !this.state.changed },
                                    Messages.get("LabelSave")
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'ilv-input-group' },
                            React.createElement(
                                'select',
                                { className: 'ilv-form-control ilv-form-control-lg', value: this.state.field, onChange: this.changeField },
                                this.state.configs.map(function (config, index) {
                                    return React.createElement(
                                        'option',
                                        { value: index, key: "field-" + index },
                                        config.Label
                                    );
                                })
                            ),
                            React.createElement(
                                'div',
                                { className: 'ilv-input-group-btn' },
                                React.createElement(
                                    'button',
                                    { className: 'ilv-btn ilv-btn-lg ilv-btn-icon ilv-btn-success', onClick: this.addField, title: Messages.get("LabelNewField") },
                                    React.createElement(
                                        'i',
                                        { className: 'ilv-icon material-icons md-24' },
                                        '\uE145'
                                    )
                                )
                            )
                        )
                    )
                )
            ),
            React.createElement(
                'div',
                { className: 'row' },
                React.createElement(
                    'div',
                    { className: 'col' },
                    this.renderField(this.state.field)
                )
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }
}();

;