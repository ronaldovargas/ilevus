"use strict";

var moment = require("moment");
var React = require("react");
var S = require("string");
var Toastr = require("toastr");

var UserSession = require("ilevus/jsx/core/store/UserSession.jsx");
var ScheduleStore = require("ilevus/jsx/core/store/Schedule.jsx");

var LoadingGauge = require("ilevus/jsx/core/widget/LoadingGauge.jsx");
var MeetingScheduleForm = require("ilevus/jsx/core/widget/user/MeetingScheduleForm.jsx");
var Modal = require("ilevus/jsx/core/widget/Modal.jsx");

var Messages = require("ilevus/jsx/core/util/Messages.jsx");

module.exports = React.createClass({
    displayName: "exports",

    propTypes: {
        user: React.PropTypes.object.isRequired
    },
    getDefaultProps: function getDefaultProps() {
        return {
            user: null
        };
    },
    getInitialState: function getInitialState() {
        return {
            meetings: null,
            begin: moment().day(0).milliseconds(0).seconds(0).minutes(0).hours(0),
            end: moment().day(6).milliseconds(999).seconds(59).minutes(59).hours(23),
            today: moment()
        };
    },
    componentDidMount: function componentDidMount() {
        var me = this;

        ScheduleStore.on("retrieve-meetings", function (meetings) {
            console.log(meetings);
            me.setState({
                meetings: meetings
            });
        }, me);

        this.retrieveMeetings();
    },
    componentWillUnmount: function componentWillUnmount() {
        ScheduleStore.off(null, null, this);
    },
    retrieveMeetings: function retrieveMeetings() {
        ScheduleStore.dispatch({
            action: ScheduleStore.ACTION_RETRIEVE_MEETINGS,
            data: {
                UserId: this.props.user.get("Id"),
                From: this.state.begin.format("YYYY-MM-DTHH:mm:ssZ"),
                To: this.state.end.format("YYYY-MM-DTHH:mm:ssZ")
            }
        });
    },
    backwardWeek: function backwardWeek() {
        this.setState({
            meetings: [],
            begin: this.state.begin.day(-7),
            end: this.state.end.day(-1)
        });
        this.retrieveMeetings();
    },
    forwardWeek: function forwardWeek() {
        this.setState({
            meetings: [],
            begin: this.state.begin.day(7),
            end: this.state.end.day(13)
        });
        this.retrieveMeetings();
    },
    bookHour: function bookHour(hour, event) {
        event && event.preventDefault();
        console.log(hour);
        Modal.largeModal(Messages.get("LabelBookMeeting"), React.createElement(MeetingScheduleForm, {
            hour: hour,
            user: this.props.user,
            onBook: this.onBookMeeting }));
    },
    onBookMeeting: function onBookMeeting(meeting) {
        this.retrieveMeetings();
        Modal.hide();
        Toastr.remove();
        Toastr.success(Messages.get("TextBookMeetingSuccess"));
    },
    isHourBooked: function isHourBooked(hour) {
        for (var i = 0; i < this.state.meetings.length; i++) {
            if (hour.isSame(moment(this.state.meetings[i].Begin), 'minute')) {
                return true;
            }
        }
        return false;
    },
    renderCalendarForBooking: function renderCalendarForBooking() {
        var _this = this;

        var configs = this.props.user.get("ScheduleConfig");
        var days = [];
        for (var day = 0; day < 7; day++) {
            days.push(moment(this.state.begin).day(day));
        }
        var interval = configs.Interval;
        var accepts = JSON.parse(configs.HourConfig);
        var hoursEnabled = [];
        for (var i = 0; i < accepts.length; i++) {
            hoursEnabled.push(accepts[i].indexOf(true) >= 0);
        }
        var hour = moment(this.state.begin).hours(0).minutes(0);

        return React.createElement(
            "table",
            { className: "ilv-schedule" },
            React.createElement(
                "thead",
                null,
                React.createElement(
                    "tr",
                    null,
                    React.createElement(
                        "th",
                        { onClick: this.backwardWeek, style: { cursor: "pointer", width: "45px", maxWidth: "45px" } },
                        React.createElement(
                            "i",
                            { className: "material-icons md-36" },
                            "\uE314"
                        )
                    ),
                    days.map(function (day, idx) {
                        return React.createElement(
                            "th",
                            { key: "day-header-" + idx },
                            React.createElement(
                                "div",
                                null,
                                day.isSame(_this.state.today, "date") ? Messages.get("LabelToday") : day.format("ddd")
                            ),
                            React.createElement(
                                "div",
                                null,
                                day.format("D MMM")
                            )
                        );
                    }),
                    React.createElement(
                        "th",
                        { onClick: this.forwardWeek, style: { cursor: "pointer", width: "45px", maxWidth: "45px" } },
                        React.createElement(
                            "i",
                            { className: "material-icons md-36" },
                            "\uE5CC"
                        )
                    )
                )
            ),
            React.createElement(
                "tbody",
                null,
                hoursEnabled.map(function (enabled, idx) {
                    var columns = accepts[idx].map(function (day, dayIdx) {
                        var now = moment();
                        var bookHour = moment(hour).day(dayIdx);
                        var booked = _this.isHourBooked(bookHour);
                        var antecipated = bookHour.isSameOrAfter(now.hours(now.hours() + configs.Antecedence), 'minute');
                        return React.createElement(
                            "td",
                            { key: "hour-" + idx + "-day-" + dayIdx },
                            day && antecipated && !booked ? React.createElement(
                                "a",
                                { onClick: _this.bookHour.bind(_this, bookHour) },
                                hour.format("HH:mm")
                            ) : ""
                        );
                    });
                    hour.minutes(hour.minutes() + interval);
                    return React.createElement(
                        "tr",
                        { key: "hour-row-" + idx, style: { display: enabled ? undefined : "none" } },
                        React.createElement("td", null),
                        columns,
                        React.createElement("td", null)
                    );
                })
            )
        );
    },
    render: function render() {
        if (!this.state.meetings) {
            return React.createElement("div", null);
        }
        return React.createElement(
            "div",
            null,
            this.renderCalendarForBooking()
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }
}();

;