var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { fetchState } from 'react-router-server';
import { isPending, hasFailed } from 'redux-saga-thunk';
import { fromEntities, fromResource } from 'store/selectors';
import { resourceListReadRequest } from 'store/actions';
import { isBrowser, isServer } from 'config';

import { PostList } from 'components';

var PostListContainer = function (_Component) {
  _inherits(PostListContainer, _Component);

  function PostListContainer() {
    _classCallCheck(this, PostListContainer);

    return _possibleConstructorReturn(this, (PostListContainer.__proto__ || Object.getPrototypeOf(PostListContainer)).apply(this, arguments));
  }

  _createClass(PostListContainer, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _props = this.props,
          readList = _props.readList,
          hasServerState = _props.hasServerState,
          setServerState = _props.setServerState,
          cleanServerState = _props.cleanServerState;


      if (!hasServerState) {
        if (isServer) {
          readList().then(setServerState, setServerState);
        } else {
          readList();
        }
      } else if (isBrowser) {
        cleanServerState();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          list = _props2.list,
          loading = _props2.loading,
          failed = _props2.failed;

      return React.createElement(PostList, { list: list, loading: loading, failed: failed });
    }
  }]);

  return PostListContainer;
}(Component);

PostListContainer.propTypes = {
  list: PropTypes.arrayOf(PropTypes.object).isRequired,
  limit: PropTypes.number,
  loading: PropTypes.bool,
  failed: PropTypes.bool,
  readList: PropTypes.func.isRequired,
  hasServerState: PropTypes.bool,
  setServerState: PropTypes.func.isRequired,
  cleanServerState: PropTypes.func.isRequired
};
PostListContainer.defaultProps = {
  limit: 20
};


var mapStateToProps = function mapStateToProps(state) {
  return {
    list: fromEntities.getList(state, 'posts', fromResource.getList(state, 'posts')),
    loading: isPending(state, 'postsListRead'),
    failed: hasFailed(state, 'postsListRead')
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch, _ref) {
  var limit = _ref.limit;
  return {
    readList: function readList() {
      return dispatch(resourceListReadRequest('posts', { _limit: limit }));
    }
  };
};

var withServerState = fetchState(function (state) {
  return {
    hasServerState: !!state.data
  };
}, function (actions) {
  return {
    setServerState: function setServerState(data) {
      return actions.done({ data: data });
    },
    cleanServerState: function cleanServerState() {
      return actions.done();
    }
  };
});

var _default = withServerState(connect(mapStateToProps, mapDispatchToProps)(PostListContainer));

export default _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(PostListContainer, 'PostListContainer', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/containers/PostList.js');

  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/containers/PostList.js');

  __REACT_HOT_LOADER__.register(mapDispatchToProps, 'mapDispatchToProps', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/containers/PostList.js');

  __REACT_HOT_LOADER__.register(withServerState, 'withServerState', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/containers/PostList.js');

  __REACT_HOT_LOADER__.register(_default, 'default', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/containers/PostList.js');
}();

;