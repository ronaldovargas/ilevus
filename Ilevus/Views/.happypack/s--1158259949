"use strict";

var S = require("string");
var $ = require("jquery");
var _ = require("underscore");
var React = require("react");
var Link = require("react-router").Link;
var Toastr = require("toastr");

var SystemStore = require("ilevus/jsx/core/store/System.jsx");
var UserSession = require("ilevus/jsx/core/store/UserSession.jsx");

var LoadingGauge = require("ilevus/jsx/core/widget/LoadingGauge.jsx");

var Messages = require("ilevus/jsx/core/util/Messages.jsx");

function filterNew(value) {
    return value[1] && value[1].New;
}

function filterNotReviewed(value) {
    return value[1] && !value[1].New && !value[1].Reviewed;
}

function filterAll(value) {
    return value[1] && !value[1].New && value[1].Reviewed;
}

module.exports = React.createClass({
    displayName: "exports",

    contextTypes: {
        router: React.PropTypes.object
    },
    getInitialState: function getInitialState() {
        return {
            loading: true,
            lang: "pt-br",
            editKey: null
        };
    },
    componentDidMount: function componentDidMount() {
        var me = this;
        SystemStore.on("retrieve-messages", function (messages) {
            var ptBR = _.sortBy(_.pairs(messages['pt-br'].Messages), function (msg) {
                return msg[0];
            });
            var en = _.sortBy(_.pairs(messages['en'].Messages), function (msg) {
                return msg[0];
            });
            var es = _.sortBy(_.pairs(messages['es'].Messages), function (msg) {
                return msg[0];
            });
            me.setState({
                loading: false,
                raw: messages,
                editKey: null,
                "pt-br": {
                    New: _.filter(ptBR, filterNew),
                    NotReviewed: _.filter(ptBR, filterNotReviewed),
                    All: _.filter(ptBR, filterAll)
                },
                en: {
                    New: _.filter(en, filterNew),
                    NotReviewed: _.filter(en, filterNotReviewed),
                    All: _.filter(en, filterAll)
                },
                es: {
                    New: _.filter(es, filterNew),
                    NotReviewed: _.filter(es, filterNotReviewed),
                    All: _.filter(es, filterAll)
                }
            });
            $("button").removeAttr("disabled");
        }, me);

        SystemStore.on("update-translation", function () {
            Toastr.remove();
            Toastr.success(Messages.get("TextDataSavedSuccessfully"));
            me.refreshMessages();
        }, me);

        SystemStore.on("translations-synced", function (count) {
            Toastr.remove();
            Toastr.success(Messages.format("TextNTranslationsSynced", [count]));
            me.refreshMessages();
        }, me);

        SystemStore.on("add-translation-key", function () {
            Toastr.remove();
            Toastr.success(Messages.get("TextTranslationKeyAdded"));
            me.refreshMessages();
        }, me);

        SystemStore.on("review-translation-key", function () {
            Toastr.remove();
            Toastr.success(Messages.get("TextDataSavedSuccessfully"));
            me.refreshMessages();
        }, me);

        SystemStore.on("fail", function (msg) {
            $("button").removeAttr("disabled");
            $(me.refs["save-btn"]).removeAttr("disabled");
            $(me.refs["sync-btn"]).removeAttr("disabled");
        }, me);

        me.refreshMessages();
    },
    componentWillUnmount: function componentWillUnmount() {
        SystemStore.off(null, null, this);
    },
    refreshMessages: function refreshMessages() {
        SystemStore.dispatch({
            action: SystemStore.ACTION_RETRIEVE_MESSAGES
        });
    },
    changeLanguage: function changeLanguage(lang, event) {
        event && event.preventDefault();
        this.setState({
            lang: lang
        });
    },
    syncTranslations: function syncTranslations(event) {
        event && event.preventDefault();
        var prefix = S(this.refs["url-prefix"].value);
        if (prefix.isEmpty()) {
            Toastr.remove();
            Toastr.error(Messages.get("TextTypeRemoteUrlPrefix"));
            return;
        }
        $(this.refs['sync-btn']).attr("disabled", "disabled");
        SystemStore.dispatch({
            action: SystemStore.ACTION_SYNC_TRANSLATIONS,
            data: prefix.s
        });
    },
    addTranslationKey: function addTranslationKey(event) {
        event && event.preventDefault();
        var value = S(this.refs["new-message-label"].value);
        if (value.isEmpty()) {
            Toastr.remove();
            Toastr.error(Messages.get("TextTypeNewKey"));
            return;
        }
        $(this.refs['add-btn']).attr("disabled", "disabled");
        SystemStore.dispatch({
            action: SystemStore.ACTION_ADD_TRANSLATION_KEY,
            data: value.s
        });
    },
    tweakEditing: function tweakEditing(key, event) {
        event && event.preventDefault();
        this.setState({
            editKey: key
        });
    },
    saveMessage: function saveMessage(event) {
        event && event.preventDefault();
        $(this.refs["save-btn"]).attr("disabled", "disabled");
        SystemStore.dispatch({
            action: SystemStore.ACTION_UPDATE_TRANSLATION,
            data: {
                OldKey: this.state.editKey,
                Key: this.refs['key-input-' + this.state.editKey].value,
                Content: this.refs['content-input-' + this.state.editKey].value,
                Lang: this.state.lang
            }
        });
    },
    onKeyUp: function onKeyUp(event) {
        if (event.key == "Enter") {
            this.saveMessage(event);
        } else if (event.key == "Escape") {
            this.setState({
                editKey: null
            });
        }
    },
    reviewTranslation: function reviewTranslation(key, event) {
        event && event.preventDefault();
        SystemStore.dispatch({
            action: SystemStore.ACTION_REVIEW_TRANSLATION_KEY,
            data: {
                Key: key,
                Lang: this.state.lang
            }
        });
    },
    renderEditInput: function renderEditInput(ref, defaultValue) {
        return React.createElement("input", { onKeyUp: this.onKeyUp,
            type: "text",
            className: "ilv-form-control",
            defaultValue: defaultValue,
            ref: ref });
    },
    renderTable: function renderTable(messages) {
        var _this = this;

        return React.createElement(
            "table",
            { className: "ilv-table ilv-table-sm ilv-table-middle ilv-text-sm" },
            React.createElement(
                "thead",
                null,
                React.createElement(
                    "tr",
                    null,
                    React.createElement(
                        "th",
                        null,
                        Messages.get("LabelKey")
                    ),
                    React.createElement(
                        "th",
                        null,
                        Messages.get("LabelContent")
                    ),
                    React.createElement(
                        "th",
                        { className: "ilv-text-xs-right" },
                        Messages.get("LabelStatus")
                    )
                )
            ),
            React.createElement(
                "tbody",
                null,
                messages.map(function (msg, index) {
                    return msg[0] == _this.state.editKey ? React.createElement(
                        "tr",
                        { key: 'label-' + index },
                        React.createElement(
                            "td",
                            null,
                            _this.renderEditInput('key-input-' + msg[0], msg[0])
                        ),
                        React.createElement(
                            "td",
                            null,
                            _this.renderEditInput('content-input-' + msg[0], msg[1].Content)
                        ),
                        React.createElement(
                            "td",
                            { className: "ilv-text-xs-right" },
                            React.createElement(
                                "a",
                                { onClick: _this.saveMessage, ref: "save-btn" },
                                React.createElement(
                                    "i",
                                    { className: "material-icons ilv-text-success", title: Messages.get("LabelSave") },
                                    "\uE876"
                                )
                            ),
                            " ",
                            React.createElement(
                                "a",
                                { onClick: _this.tweakEditing.bind(_this, null) },
                                React.createElement(
                                    "i",
                                    { className: "material-icons ilv-text-danger", title: Messages.get("ActionCancel") },
                                    "\uE5CD"
                                )
                            )
                        )
                    ) : React.createElement(
                        "tr",
                        { key: 'label-' + index },
                        React.createElement(
                            "td",
                            null,
                            React.createElement(
                                "a",
                                { title: Messages.get("LabelActions"), className: "hidden" },
                                React.createElement(
                                    "i",
                                    { className: "material-icons" },
                                    "\uE313"
                                )
                            ),
                            " ",
                            React.createElement(
                                "span",
                                { onClick: _this.tweakEditing.bind(_this, msg[0]) },
                                msg[0]
                            )
                        ),
                        React.createElement(
                            "td",
                            null,
                            React.createElement(
                                "span",
                                { onClick: _this.tweakEditing.bind(_this, msg[0]) },
                                msg[1].Content
                            )
                        ),
                        React.createElement(
                            "td",
                            { className: "ilv-text-xs-right" },
                            msg[1].New ? "" : msg[1].Reviewed ? React.createElement(
                                "i",
                                { className: "material-icons ilv-text-info" },
                                "\uE877"
                            ) : React.createElement(
                                "a",
                                { className: "material-icons", onClick: _this.reviewTranslation.bind(_this, msg[0]),
                                    title: Messages.get("ActionReview") },
                                "\uE876"
                            )
                        )
                    );
                })
            )
        );
    },
    renderMessages: function renderMessages(messages) {
        return React.createElement(
            "div",
            { className: "ilv-media-list" },
            messages.New.length > 0 ? React.createElement(
                "div",
                { className: "ilv-media" },
                React.createElement(
                    "div",
                    { className: "ilv-media-body" },
                    React.createElement(
                        "h4",
                        null,
                        Messages.get("LabelNew")
                    ),
                    React.createElement("hr", null),
                    this.renderTable(messages.New)
                )
            ) : "",
            messages.NotReviewed.length > 0 ? React.createElement(
                "div",
                { className: "ilv-media" },
                React.createElement(
                    "div",
                    { className: "ilv-media-body" },
                    React.createElement(
                        "h4",
                        null,
                        Messages.get("LabelNotReviewed")
                    ),
                    React.createElement("hr", null),
                    this.renderTable(messages.NotReviewed)
                )
            ) : "",
            React.createElement(
                "div",
                { className: "ilv-media" },
                React.createElement(
                    "div",
                    { className: "ilv-media-body" },
                    React.createElement(
                        "h4",
                        null,
                        Messages.get("LabelReviewed")
                    ),
                    React.createElement("hr", null),
                    this.renderTable(messages.All)
                )
            )
        );
    },
    render: function render() {
        if (this.state.loading) return React.createElement(LoadingGauge, null);
        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                { className: "ilv-card" },
                React.createElement(
                    "div",
                    { className: "ilv-card-header" },
                    React.createElement(
                        "div",
                        { className: "row" },
                        React.createElement(
                            "div",
                            { className: "col-md-4" },
                            React.createElement(
                                "strong",
                                null,
                                Messages.get("LabelTranslations")
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "col" },
                            React.createElement(
                                "form",
                                { className: "ilv-form-inline", onSubmit: this.syncTranslations },
                                React.createElement(
                                    "div",
                                    { className: "ilv-form-group" },
                                    React.createElement("input", { type: "url",
                                        spellCheck: false,
                                        className: "ilv-form-control",
                                        ref: "url-prefix",
                                        placeholder: Messages.get("LabelUrlPrefix") }),
                                    React.createElement(
                                        "button",
                                        { type: "submit",
                                            className: "ilv-btn ilv-btn-primary",
                                            ref: "sync-btn" },
                                        Messages.get("LabelSyncRemoteTranslations")
                                    )
                                )
                            )
                        )
                    )
                ),
                React.createElement(
                    "div",
                    { className: "ilv-card-body" },
                    React.createElement(
                        "ul",
                        { className: "ilv-text-sm nav nav-tabs m-b-1" },
                        React.createElement(
                            "li",
                            { className: "nav-item" },
                            React.createElement(
                                "a",
                                { className: "nav-link" + (this.state.lang == "pt-br" ? " active" : ""),
                                    onClick: this.changeLanguage.bind(this, "pt-br") },
                                Messages.get("LanguagePortuguese")
                            )
                        ),
                        React.createElement(
                            "li",
                            { className: "nav-item" },
                            React.createElement(
                                "a",
                                { className: "nav-link" + (this.state.lang == 'en' ? " active" : ""),
                                    onClick: this.changeLanguage.bind(this, "en") },
                                Messages.get("LanguageEnglish")
                            )
                        ),
                        React.createElement(
                            "li",
                            { className: "nav-item" },
                            React.createElement(
                                "a",
                                { className: "nav-link" + (this.state.lang == 'es' ? " active" : ""),
                                    onClick: this.changeLanguage.bind(this, "es") },
                                Messages.get("LanguageSpanish")
                            )
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "tab-content" },
                        React.createElement(
                            "div",
                            { className: "tab-pane active" },
                            React.createElement(
                                "form",
                                { className: "ilv-form-inline", onSubmit: this.addTranslationKey },
                                React.createElement(
                                    "div",
                                    { className: "ilv-form-group" },
                                    React.createElement("input", { type: "text",
                                        spellCheck: false,
                                        className: "ilv-form-control",
                                        ref: "new-message-label",
                                        placeholder: Messages.get("LabelNewKey")
                                    }),
                                    React.createElement(
                                        "button",
                                        { type: "submit",
                                            className: "ilv-btn ilv-btn-primary",
                                            ref: "add-btn" },
                                        Messages.get("LabelAddNewMessage")
                                    )
                                )
                            ),
                            this.renderMessages(this.state[this.state.lang])
                        )
                    )
                )
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }

    __REACT_HOT_LOADER__.register(Link, "Link", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/admin/AdminPanelTranslate.jsx");

    __REACT_HOT_LOADER__.register(filterNew, "filterNew", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/admin/AdminPanelTranslate.jsx");

    __REACT_HOT_LOADER__.register(filterNotReviewed, "filterNotReviewed", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/admin/AdminPanelTranslate.jsx");

    __REACT_HOT_LOADER__.register(filterAll, "filterAll", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/admin/AdminPanelTranslate.jsx");
}();

;