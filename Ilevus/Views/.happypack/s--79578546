var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _templateObject = _taggedTemplateLiteral(['\n  margin: 0.5rem 0 0;\n'], ['\n  margin: 0.5rem 0 0;\n']),
    _templateObject2 = _taggedTemplateLiteral(['\n  margin-bottom: 1rem;\n  input[type="checkbox"],\n  input[type="radio"] {\n    margin-right: 0.5rem;\n  }\n  label {\n    vertical-align: middle;\n  }\n'], ['\n  margin-bottom: 1rem;\n  input[type="checkbox"],\n  input[type="radio"] {\n    margin-right: 0.5rem;\n  }\n  label {\n    vertical-align: middle;\n  }\n']);

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';

import { Label, Input, Block } from 'components';

var Error = styled(Block)(_templateObject);

var Wrapper = styled.div(_templateObject2);

var Field = function Field(_ref) {
  var error = _ref.error,
      name = _ref.name,
      invalid = _ref.invalid,
      label = _ref.label,
      type = _ref.type,
      props = _objectWithoutProperties(_ref, ['error', 'name', 'invalid', 'label', 'type']);

  var inputProps = _extends({
    id: name, name: name, type: type, invalid: invalid, 'aria-describedby': name + 'Error' }, props);
  var renderInputFirst = type === 'checkbox' || type === 'radio';
  return React.createElement(
    Wrapper,
    null,
    renderInputFirst && React.createElement(Input, inputProps),
    label && React.createElement(
      Label,
      { htmlFor: inputProps.id },
      label
    ),
    renderInputFirst || React.createElement(Input, inputProps),
    invalid && error && React.createElement(
      Error,
      { id: name + 'Error', role: 'alert', palette: 'danger' },
      error
    )
  );
};

Field.propTypes = {
  name: PropTypes.string.isRequired,
  invalid: PropTypes.bool,
  error: PropTypes.string,
  label: PropTypes.string,
  type: PropTypes.string
};

Field.defaultProps = {
  type: 'text'
};

var _default = Field;
export default _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(Error, 'Error', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/components/molecules/Field/index.js');

  __REACT_HOT_LOADER__.register(Wrapper, 'Wrapper', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/components/molecules/Field/index.js');

  __REACT_HOT_LOADER__.register(Field, 'Field', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/components/molecules/Field/index.js');

  __REACT_HOT_LOADER__.register(_default, 'default', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/components/molecules/Field/index.js');
}();

;