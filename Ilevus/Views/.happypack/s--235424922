
var S = require("string");
require("ilevus/jsx/vendor/intlTelInput.js");

var React = require("react");
var Link = require("react-router").Link;
var Toastr = require("toastr");
var MaskedInput = require('react-maskedinput');

var LanguageSelect = require("ilevus/jsx/core/widget/LanguageSelect.jsx");

var UserSession = require("ilevus/jsx/core/store/UserSession.jsx");

var LoadingGauge = require("ilevus/jsx/core/widget/LoadingGauge.jsx");

var Messages = require("ilevus/jsx/core/util/Messages.jsx");

module.exports = React.createClass({
    displayName: "exports",

    contextTypes: {
        router: React.PropTypes.object,
        professionalData: React.PropTypes.object.isRequired,
        userId: React.PropTypes.string.isRequired
    },
    state: {
        TaxDocument: '',
        AreaCode: '',
        Number: ''
    },
    getInitialState: function getInitialState() {
        var map = LanguageSelect.LanguagesMap,
            lang,
            langs = this.context.professionalData.SpokenLanguages || [],
            langsMap = {},
            code;
        for (var i = 0; i < langs.length; i++) {
            code = langs[i];
            lang = map[code];
            if (lang) lang.code = code;
            langs[i] = lang || code;
            langsMap[code] = lang || code;
        }
        return {
            languages: langs,
            languagesMap: langsMap
        };
    },
    componentDidMount: function componentDidMount() {
        var me = this;
        UserSession.on("professionalprofile", function (data) {
            Toastr.success(Messages.get("TextDataSavedSuccessfully"));
            me.context.router.push("/become-a-professional");
        }, me);
        console.log(this.context);
        this.updatePhoneInput();
    },
    componentWillUnmount: function componentWillUnmount() {
        UserSession.off(null, null, this);
    },
    saveInfo: function saveInfo(event) {
        if (!this.phoneNumberValidation()) {
            Toastr.error(Messages.get("ValidationPhoneNumberInvalid"));
            return;
        }
        event.preventDefault();
        $(this.refs['btn-submit']).attr("disabled", true);
        var langs = [];
        for (var i = 0; i < this.state.languages.length; i++) {
            langs.push(this.state.languages[i].code);
        }
        var data = {
            Industry: this.refs['field-industry'].value,
            Headline: this.refs['field-headline'].value,
            Specialties: this.refs['field-specialties'].value,
            Summary: this.refs['field-summary'].value,
            BirthDate: $('input[name*=BirthDate')[0].value,
            TaxDocument: $('input[name*=TaxDocument')[0].value,
            Phone: $.trim($("#editProfileFormPhone").val()),
            SpokenLanguages: langs
        };
        console.log("Form submit:\n", data);
        UserSession.dispatch({
            action: UserSession.ACTION_UPDATE_PROFESSIONAL_BASIC,
            data: data
        });
    },
    addLanguage: function addLanguage(event) {
        event.preventDefault();
        var lang = this.refs['field-lang'].getValue();
        if (lang) {
            this.state.languages.push(lang);
            this.refs['field-lang'].reset();
            this.setState({
                languagesMap: this.getLanguagesMap()
            });
        }
    },
    removeLanguage: function removeLanguage(index) {
        this.state.languages.splice(index, 1);
        this.setState({
            languagesMap: this.getLanguagesMap()
        });
    },
    getLanguagesMap: function getLanguagesMap() {
        var data = {},
            aux;
        for (var i = 0; i < this.state.languages.length; i++) {
            aux = this.state.languages[i];
            data[aux.code] = aux.name;
        }
        return data;
    },
    filterLanguages: function filterLanguages(lang) {
        if (this.state.languagesMap[lang.code]) return false;
        return true;
    },

    phoneFilterRe: /[0-9\-\+ ]/,
    updatePhoneInput: function updatePhoneInput() {
        $("#editProfileFormPhone").intlTelInput();
    },
    phoneNumberValidation: function phoneNumberValidation() {
        if (!$("#editProfileFormPhone").intlTelInput("isValidNumber")) {
            $("#editProfileFormPhone").addClass("ilv-invalid");
            return false;
        } else {
            $("#editProfileFormPhone").removeClass("ilv-invalid");
            return true;
        }
    },
    phoneNumberFilter: function phoneNumberFilter(event, opts) {
        if (event.key && event.key.match && !event.key.match(this.phoneFilterRe)) event.preventDefault();
    },
    _onChange: function _onChange(e) {
        var stateChange = {};
        stateChange[e.target.name] = e.target.value;
        this.setState(stateChange);
    },
    render: function render() {
        var _this = this;

        var langs = this.state.languages;
        return React.createElement(
            "div",
            { className: "container" },
            React.createElement(
                "div",
                { className: "row justify-content-center" },
                React.createElement(
                    "div",
                    { className: "col-6" },
                    React.createElement(
                        "form",
                        { onSubmit: this.saveInfo },
                        React.createElement(
                            "div",
                            { className: "text-center my-5" },
                            React.createElement(
                                "h3",
                                null,
                                Messages.get("TextWizardHeaderBasic")
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-card" },
                            React.createElement(
                                "div",
                                { className: "ilv-card-body" },
                                React.createElement(
                                    "fieldset",
                                    { className: "ilv-form-group" },
                                    React.createElement(
                                        "label",
                                        { className: "ilv-form-label" },
                                        Messages.get("LabelTaxDocument")
                                    ),
                                    React.createElement(MaskedInput, { mask: "111.111.111-11",
                                        name: "TaxDocument",
                                        ref: "field-TaxDocument",
                                        className: "ilv-form-control ilv-form-control-lg",
                                        value: this.context.professionalData.TaxDocument,
                                        spellCheck: false,
                                        onChange: this._onChange })
                                ),
                                React.createElement(
                                    "fieldset",
                                    { className: "ilv-form-group" },
                                    React.createElement(
                                        "div",
                                        { className: "ilv-form-group m-b-0" },
                                        React.createElement(
                                            "label",
                                            { className: "ilv-form-label", htmlFor: "editProfileFormPhone" },
                                            Messages.get("LabelPhoneNumber")
                                        ),
                                        React.createElement("input", { onKeyPress: this.phoneNumberFilter, onKeyUp: this.phoneNumberValidation,
                                            type: "tel",
                                            spellCheck: false,
                                            id: "editProfileFormPhone",
                                            ref: "profile-phonenumber",
                                            defaultValue: this.context.professionalData.Phone }),
                                        React.createElement(
                                            "span",
                                            { className: "ilv-text-small" },
                                            Messages.get("TextPhoneHelp")
                                        )
                                    )
                                ),
                                React.createElement(
                                    "fieldset",
                                    { className: "ilv-form-group" },
                                    React.createElement(
                                        "label",
                                        { className: "ilv-form-label" },
                                        Messages.get("LabelBirthDate")
                                    ),
                                    React.createElement(MaskedInput, { mask: "11/11/1111",
                                        name: "BirthDate",
                                        ref: "field-BirthDate",
                                        className: "ilv-form-control ilv-form-control-lg",
                                        value: this.context.professionalData.BirthDate,
                                        spellCheck: false })
                                ),
                                React.createElement(
                                    "fieldset",
                                    { className: "ilv-form-group" },
                                    React.createElement(
                                        "label",
                                        { className: "ilv-form-label" },
                                        Messages.get("LabelIndustry")
                                    ),
                                    React.createElement("input", { className: "ilv-form-control ilv-form-control-lg",
                                        ref: "field-industry",
                                        defaultValue: this.context.professionalData.Industry,
                                        spellCheck: false,
                                        type: "text" })
                                ),
                                React.createElement(
                                    "fieldset",
                                    { className: "ilv-form-group" },
                                    React.createElement(
                                        "label",
                                        { className: "ilv-form-label" },
                                        Messages.get("LabelHeadline")
                                    ),
                                    React.createElement("input", { className: "ilv-form-control ilv-form-control-lg",
                                        ref: "field-headline",
                                        defaultValue: this.context.professionalData.Headline,
                                        spellCheck: false,
                                        type: "text" })
                                ),
                                React.createElement(
                                    "fieldset",
                                    { className: "ilv-form-group" },
                                    React.createElement(
                                        "label",
                                        { className: "ilv-form-label" },
                                        Messages.get("LabelSpecialties")
                                    ),
                                    React.createElement("input", { className: "ilv-form-control ilv-form-control-lg",
                                        ref: "field-specialties",
                                        defaultValue: this.context.professionalData.Specialties,
                                        spellCheck: false,
                                        type: "text" })
                                ),
                                React.createElement(
                                    "fieldset",
                                    { className: "ilv-form-group" },
                                    React.createElement(
                                        "label",
                                        { className: "ilv-form-label" },
                                        Messages.get("LabelSummary")
                                    ),
                                    React.createElement("textarea", { rows: "6",
                                        className: "ilv-form-control ilv-form-control-lg",
                                        ref: "field-summary",
                                        defaultValue: this.context.professionalData.Summary })
                                ),
                                React.createElement(
                                    "fieldset",
                                    { className: "ilv-form-group" },
                                    React.createElement(
                                        "label",
                                        { className: "ilv-form-label" },
                                        Messages.get("LabelLanguages")
                                    ),
                                    React.createElement(
                                        "div",
                                        { className: "ilv-input-group" },
                                        React.createElement(LanguageSelect, { className: "ilv-form-control ilv-form-control-lg",
                                            ref: "field-lang",
                                            filter: this.filterLanguages,
                                            spellCheck: false }),
                                        React.createElement(
                                            "div",
                                            { className: "ilv-input-group-btn" },
                                            React.createElement(
                                                "button",
                                                { className: "ilv-btn ilv-btn-lg ilv-btn-icon ilv-btn-success", onClick: this.addLanguage },
                                                React.createElement(
                                                    "i",
                                                    { className: "ilv-icon material-icons md-24" },
                                                    "\uE145"
                                                )
                                            )
                                        )
                                    )
                                ),
                                React.createElement(
                                    "fieldset",
                                    { className: "ilv-form-group" },
                                    React.createElement(
                                        "div",
                                        { className: "ilv-tag-input mb-2 ilv-text-xs-center", style: { backgroundColor: '#f5f7f9' }, readonly: true },
                                        langs.map(function (lang, index) {
                                            return React.createElement(
                                                "span",
                                                { className: "ilv-tag", key: "lang-" + index },
                                                lang.nativeName ? lang.nativeName : lang,
                                                " ",
                                                React.createElement(
                                                    "a",
                                                    { title: Messages.get("ActionRemoveLanguage"),
                                                        onClick: _this.removeLanguage.bind(_this, index) },
                                                    "\xD7"
                                                )
                                            );
                                        })
                                    )
                                )
                            ),
                            React.createElement(
                                "div",
                                { className: "ilv-card-footer ilv-text-xs-right" },
                                React.createElement(
                                    Link,
                                    { className: "ilv-btn ilv-btn-clean", to: "/become-a-professional" },
                                    Messages.get("LabelBack")
                                ),
                                React.createElement("input", { className: "ilv-btn ilv-btn-primary",
                                    type: "submit",
                                    ref: "btn-submit",
                                    value: Messages.get("LabelSave") })
                            )
                        )
                    )
                )
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }

    __REACT_HOT_LOADER__.register(Link, "Link", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/user/wizard/ProfileWizardBasic.jsx");
}();

;