"use strict";

var moment = require("moment");
var React = require('react');
var Link = require("react-router").Link;
var Toastr = require("toastr");

var Messages = require("ilevus/jsx/core/util/Messages.jsx");
var UserSession = require("ilevus/jsx/core/store/UserSession.jsx");
var ScheduleStore = require("ilevus/jsx/core/store/Schedule.jsx");
var MeetingScheduleConfig = require("ilevus/jsx/core/widget/user/MeetingScheduleConfig.jsx");

var LoadingGauge = require("ilevus/jsx/core/widget/LoadingGauge.jsx");

var string = require("string");
var UserIcon = require("ilevus/img/user.png");

module.exports = React.createClass({
    displayName: "exports",

    contextTypes: {
        router: React.PropTypes.object
    },

    getInitialState: function getInitialState() {
        return {
            meetings: null,
            loaded: false
        };
    },
    componentDidMount: function componentDidMount() {
        var me = this;
        ScheduleStore.on("retrieve-my-meetings", function (meetings) {
            me.setState({
                meetings: meetings,
                loaded: true
            });
        }, me);

        ScheduleStore.dispatch({
            action: ScheduleStore.ACTION_RETRIEVE_MY_MEETINGS,
            data: {}
        });
    },
    componentWillUnmount: function componentWillUnmount() {
        ScheduleStore.off(null, null, this);
    },
    renderMeetings: function renderMeetings() {
        if (!this.state.meetings || this.state.meetings.length <= 0) {
            return React.createElement(
                "i",
                null,
                "Nenhuma reuni\xE3o futura marcada at\xE9 o momento."
            );
        }
        return React.createElement(
            "div",
            { className: "ilv-media-list ilv-media-list-bordered" },
            this.state.meetings.map(function (meeting, index) {
                return React.createElement(
                    "div",
                    { className: "ilv-media mb-3", key: "meeting-" + index },
                    React.createElement(
                        "div",
                        { className: "ilv-media-body" },
                        React.createElement(
                            "h4",
                            { className: "my-0" },
                            meeting.CoacheeFullName
                        ),
                        React.createElement(
                            "span",
                            null,
                            React.createElement(
                                "i",
                                { className: "ilv-icon material-icons md-inherit mr-1" },
                                "\uE8B5"
                            ),
                            React.createElement(
                                "span",
                                null,
                                moment(meeting.Begin).format("dddd, D/MM/YYYY HH:mm")
                            )
                        ),
                        React.createElement(
                            "p",
                            null,
                            React.createElement(
                                "small",
                                null,
                                meeting.CoacheePhone,
                                " - ",
                                meeting.CoacheeEmail
                            )
                        ),
                        React.createElement(
                            "small",
                            null,
                            React.createElement(
                                "strong",
                                null,
                                Messages.get("LabelDescription")
                            )
                        ),
                        React.createElement(
                            "p",
                            null,
                            meeting.Subject
                        )
                    )
                );
            })
        );
    },
    render: function render() {
        if (!this.state.loaded) {
            return React.createElement(LoadingGauge, null);
        }
        return React.createElement(
            "div",
            { className: "container" },
            React.createElement(
                "div",
                { className: "row mb-5" },
                React.createElement(
                    "div",
                    { className: "col" },
                    React.createElement(
                        "div",
                        { className: "ilv-media ilv-media-middle mb-4" },
                        React.createElement(
                            "div",
                            { className: "ilv-media-body" },
                            React.createElement(
                                "h4",
                                null,
                                Messages.get("YourSchedules"),
                                " (",
                                !this.state.meetings || this.state.meetings.length <= 0 ? 0 : this.state.meetings.length,
                                ") \xA0",
                                React.createElement(
                                    Link,
                                    { to: "/user/schedule/configure", className: "ilv-btn ilv-btn-primary" },
                                    Messages.get("ActionConfigure")
                                )
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-media-right" },
                            React.createElement(
                                "select",
                                { className: "ilv-form-control" },
                                React.createElement(
                                    "option",
                                    null,
                                    Messages.get("AllSchedules")
                                ),
                                React.createElement(
                                    "option",
                                    null,
                                    Messages.get("AcceptedSchedules")
                                ),
                                React.createElement(
                                    "option",
                                    null,
                                    Messages.get("RefusedSchedules")
                                )
                            )
                        )
                    ),
                    this.renderMeetings()
                )
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }

    __REACT_HOT_LOADER__.register(Link, "Link", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/user/ViewSchedule.jsx");
}();

;