/**
    Este componente define a estrutura geral da aplicação. Ele é renderizado pela
    rota raiz e renderiza os componentes aninhados da forma necessária.
    Ele é análogo ao _Layout.cshtml em uma aplicação ASP.NET convencional.
*/

var React = require("react");
var Router = require('react-router').Router;
var Route = require('react-router').Route;
var Link = require("react-router").Link;

var UserSession = require("ilevus/jsx/core/store/UserSession.jsx");

var Messages = require("ilevus/jsx/core/util/Messages.jsx");

var MainMenu = require("ilevus/jsx/core/widget/MainMenu.jsx");
var TopBar = require("ilevus/jsx/core/widget/TopBar.jsx");

var LoadingGauge = require("ilevus/jsx/core/widget/LoadingGauge.jsx");

var Logo = require('ilevus/img/ilevus-logo-20px.png');

//var ConteudoRodape = require("ilevus/jsx/core/view/FooterContent.jsx");

module.exports = React.createClass({
    displayName: 'exports',

    contextTypes: {
        router: React.PropTypes.object
    },
    childContextTypes: {
        admin: React.PropTypes.bool,
        messages: React.PropTypes.object
    },
    getChildContext: function getChildContext() {
        return {
            admin: !UserSession.get("loading") && this.isAdminLogged(),
            messages: Messages
        };
    },
    getInitialState: function getInitialState() {
        return {
            loading: UserSession.get("loading")
        };
    },
    componentWillMount: function componentWillMount() {
        this.context.router.listen(this.onRouteChange);
    },
    componentDidMount: function componentDidMount() {
        var me = this;
        UserSession.on("loaded", function () {
            me.setState({ loading: false });
        }, me);
    },
    componentWillUnmount: function componentWillUnmount() {
        UserSession.off(null, null, this);
    },
    onRouteChange: function onRouteChange(route) {
        if (typeof ga == 'function') {
            ga('send', 'pageview', route.pathname);
        }
    },
    isAdminLogged: function isAdminLogged() {
        var perms = UserSession.get("permissions");
        if (UserSession.get("logged") && perms && perms.length > 0 && perms.indexOf("All") >= 0) {
            return true;
        }
        return false;
    },


    render: function render() {
        if (this.state.loading) {
            return React.createElement(LoadingGauge, null);
        }
        return React.createElement(
            'div',
            null,
            React.createElement(TopBar, null),
            React.createElement(
                'main',
                { className: 'page-content', role: 'main' },
                this.props.children,
                React.createElement(
                    'footer',
                    { className: 'ilv-lp-footer' },
                    React.createElement(
                        'div',
                        { className: 'footer-top padd-top padd-bottom' },
                        React.createElement(
                            'div',
                            { className: 'container', id: 'FooterContent' },
                            Messages.getFile(Messages.get("TextFooterContent"), "FooterContent")
                        )
                    )
                )
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }

    __REACT_HOT_LOADER__.register(Router, 'Router', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/Application.jsx');

    __REACT_HOT_LOADER__.register(Route, 'Route', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/Application.jsx');

    __REACT_HOT_LOADER__.register(Link, 'Link', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/Application.jsx');
}();

;