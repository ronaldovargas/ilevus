
var _ = require("underscore");
var S = require("string");
var moment = require("moment");
var React = require('react');

var WheelOfLifeStore = require("ilevus/jsx/core/store/coaching/WheelOfLife.jsx");

var Messages = require("ilevus/jsx/core/util/Messages.jsx");

module.exports = React.createClass({
    displayName: "exports",

    propTypes: {
        process: React.PropTypes.object.isRequired,
        session: React.PropTypes.object.isRequired,
        sessionIndex: React.PropTypes.number.isRequired,
        tool: React.PropTypes.object.isRequired
    },
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        return {
            adding: false,
            saving: false
        };
    },
    componentDidMount: function componentDidMount() {
        var me = this;
        WheelOfLifeStore.on("save-task", function () {}, me);
    },
    componentWillUnmount: function componentWillUnmount() {
        WheelOfLifeStore.off(null, null, this);
    },
    tweakAdding: function tweakAdding(event) {
        event && event.preventDefault();
        this.setState({ adding: !this.state.adding });
    },
    saveTask: function saveTask(event) {
        event && event.preventDefault();
        WheelOfLifeStore.dispatch({
            action: WheelOfLifeStore.ACTION_SAVE_TASK,
            data: {
                ProcessId: this.props.process.Id,
                Session: this.props.sessionIndex,
                Description: this.refs['task-description'].value,
                Field: this.refs['task-field'].value,
                Deadline: this.refs['task-deadline'].value
            }
        });
        this.props.tool.Tasks.push({
            Label: this.refs['task-description'].value,
            Field: this.refs['task-field'].value,
            Deadline: this.refs['task-deadline'].value
        });
        this.tweakAdding();
    },
    editTask: function editTask(index, event) {
        event && event.preventDefault();
        this.setState({ editing: index });
    },
    updateTask: function updateTask(index, event) {
        event && event.preventDefault();
        WheelOfLifeStore.dispatch({
            action: WheelOfLifeStore.ACTION_UPDATE_TASK,
            data: {
                ProcessId: this.props.process.Id,
                Session: this.props.sessionIndex,
                Task: index,
                Description: this.refs['edit-task-description'].value,
                Field: this.refs['edit-task-field'].value,
                Deadline: this.refs['edit-task-deadline'].value
            }
        });
        this.props.tool.Tasks[index] = {
            Label: this.refs['edit-task-description'].value,
            Field: this.refs['edit-task-field'].value,
            Deadline: this.refs['edit-task-deadline'].value
        };
        this.cancelEditing();
    },
    cancelEditing: function cancelEditing(event) {
        event && event.preventDefault();
        this.setState({ editing: null });
    },
    removeTask: function removeTask(index, event) {
        event && event.preventDefault();
        WheelOfLifeStore.dispatch({
            action: WheelOfLifeStore.ACTION_REMOVE_TASK,
            data: {
                ProcessId: this.props.process.Id,
                Session: this.props.sessionIndex,
                Task: index
            }
        });
        this.props.tool.Tasks.splice(index, 1);
        this.forceUpdate();
    },
    renderTasks: function renderTasks() {
        var _this = this;

        if (this.props.tool.Tasks.length == 0) {
            return React.createElement(
                "tr",
                null,
                React.createElement(
                    "td",
                    { colSpan: "4", className: "text-center" },
                    React.createElement(
                        "i",
                        null,
                        Messages.get("TextNoTaskAdded")
                    )
                )
            );
        }
        return this.props.tool.Tasks.map(function (task, index) {
            return _this.state.editing == index ? _this.renderEditForm(task, index) : React.createElement(
                "tr",
                { key: "tool-task-" + index },
                React.createElement(
                    "td",
                    null,
                    task.Label
                ),
                React.createElement(
                    "td",
                    null,
                    task.Field
                ),
                React.createElement(
                    "td",
                    null,
                    moment(task.Deadline.substr(0, 10)).format("DD/MM/Y")
                ),
                React.createElement(
                    "td",
                    { className: "text-right" },
                    !!_this.state.adding || _this.props.session.Status != 5 ? "" : React.createElement(
                        "button",
                        { className: "ilv-btn ilv-btn-sm ilv-btn-clean mx-0", title: Messages.get("ActionEdit"), onClick: _this.editTask.bind(_this, index) },
                        React.createElement(
                            "i",
                            { className: "ilv-icon material-icons md-18" },
                            "\uE3C9"
                        )
                    ),
                    _this.props.session.Status != 5 ? "" : React.createElement(
                        "button",
                        { className: "ilv-btn ilv-btn-sm ilv-btn-clean mx-0", title: Messages.get("LabelDelete"), onClick: _this.removeTask.bind(_this, index) },
                        React.createElement(
                            "i",
                            { className: "ilv-icon material-icons md-18" },
                            "\uE5C9"
                        )
                    ),
                    ";"
                )
            );
        });
    },
    renderEditForm: function renderEditForm(task, index) {
        return React.createElement(
            "tr",
            { key: "tool-task-" + index },
            React.createElement(
                "td",
                { colSpan: "4" },
                React.createElement(
                    "form",
                    { className: "row", onSubmit: this.updateTask.bind(this, index) },
                    React.createElement(
                        "div",
                        { className: "col" },
                        React.createElement("input", { type: "text", className: "ilv-form-control", placeholder: Messages.get("LabelDescription"), required: true, ref: "edit-task-description", defaultValue: task.Label })
                    ),
                    React.createElement(
                        "div",
                        { className: "col-2" },
                        React.createElement(
                            "select",
                            { className: "ilv-form-control", placeholder: Messages.get("LabelDescription"), required: true, ref: "edit-task-field", defaultValue: task.Field },
                            this.props.tool.Fields.map(function (field, index) {
                                return React.createElement(
                                    "option",
                                    { key: "task-field-" + index, value: field.Label },
                                    field.Label
                                );
                            })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "col-2" },
                        React.createElement("input", { type: "date", className: "ilv-form-control", placeholder: Messages.get("LabelDescription"), required: true, ref: "edit-task-deadline", defaultValue: task.Deadline.substr(0, 10) })
                    ),
                    React.createElement(
                        "div",
                        { className: "col-2 text-right" },
                        React.createElement(
                            "button",
                            { className: "ilv-btn ilv-btn-sm ilv-btn-clean", onClick: this.cancelEditing, title: Messages.get("LabelCancel") },
                            "X"
                        ),
                        React.createElement(
                            "button",
                            { className: "ilv-btn ilv-btn-sm ilv-btn-success", type: "submit" },
                            Messages.get("LabelSave")
                        )
                    )
                )
            )
        );
    },
    render: function render() {
        return React.createElement(
            "div",
            { className: "row mb-5" },
            React.createElement(
                "div",
                { className: "col" },
                React.createElement(
                    "h4",
                    null,
                    Messages.get("LabelTasks")
                ),
                React.createElement(
                    "table",
                    { className: "ilv-table" },
                    React.createElement(
                        "thead",
                        null,
                        React.createElement(
                            "tr",
                            null,
                            React.createElement(
                                "th",
                                null,
                                Messages.get("LabelDescription")
                            ),
                            React.createElement(
                                "th",
                                { width: "160" },
                                Messages.get("LabelField")
                            ),
                            React.createElement(
                                "th",
                                { width: "160" },
                                Messages.get("LabelDeadline")
                            ),
                            React.createElement("th", { width: "140" })
                        )
                    ),
                    React.createElement(
                        "tbody",
                        null,
                        this.renderTasks(),
                        !this.state.adding ? !!this.state.editing || this.props.session.Status != 5 ? null : React.createElement(
                            "tr",
                            null,
                            React.createElement(
                                "td",
                                { colSpan: "4", className: "text-center" },
                                React.createElement(
                                    "a",
                                    { className: "font-weight-bold", href: "javascript:;", onClick: this.tweakAdding },
                                    "+ ",
                                    Messages.get("LabelAddTask")
                                )
                            )
                        ) : React.createElement(
                            "tr",
                            null,
                            React.createElement(
                                "td",
                                { colSpan: "4" },
                                React.createElement(
                                    "form",
                                    { className: "row", onSubmit: this.saveTask },
                                    React.createElement(
                                        "div",
                                        { className: "col" },
                                        React.createElement("input", { type: "text", className: "ilv-form-control", placeholder: Messages.get("LabelDescription"), required: true, ref: "task-description" })
                                    ),
                                    React.createElement(
                                        "div",
                                        { className: "col-2" },
                                        React.createElement(
                                            "select",
                                            { className: "ilv-form-control", placeholder: Messages.get("LabelDescription"), required: true, ref: "task-field" },
                                            this.props.tool.Fields.map(function (field, index) {
                                                return React.createElement(
                                                    "option",
                                                    { key: "task-field-" + index, value: field.Label },
                                                    field.Label
                                                );
                                            })
                                        )
                                    ),
                                    React.createElement(
                                        "div",
                                        { className: "col-2" },
                                        React.createElement("input", { type: "date", className: "ilv-form-control", placeholder: Messages.get("LabelDescription"), required: true, ref: "task-deadline" })
                                    ),
                                    React.createElement(
                                        "div",
                                        { className: "col-2 text-right" },
                                        React.createElement(
                                            "button",
                                            { className: "ilv-btn ilv-btn-sm ilv-btn-clean", onClick: this.tweakAdding, title: Messages.get("LabelCancel") },
                                            "X"
                                        ),
                                        React.createElement(
                                            "button",
                                            { className: "ilv-btn ilv-btn-sm ilv-btn-success", type: "submit" },
                                            Messages.get("LabelSave")
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }
}();

;