var _templateObject = _taggedTemplateLiteral(['\n  body {\n    margin: 0;\n  }\n'], ['\n  body {\n    margin: 0;\n  }\n']);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import { Switch, Route } from 'react-router-dom';
import { injectGlobal, ThemeProvider } from 'styled-components';
import Helmet from 'react-helmet';

import { GoogleTagManager } from 'containers';

import _ from "underscore";
import Messages from "ilevus/jsx/core/util/Messages.jsx";
import moment from "moment";
import moment_pt_br from "moment/locale/pt-br.js";
import moment_es from "moment/locale/es.js";
import Numeral from "numeral";
import Toastr from "toastr";
import S from "string";
import Marked from "marked";
var IndexRedirect = ReactRouter.IndexRedirect;
var IndexRoute = ReactRouter.IndexRoute;
var browserHistory = ReactRouter.browserHistory;
var hashHistory = ReactRouter.hashHistory;

import Application from "ilevus/jsx/Application.jsx";
import Error from "ilevus/jsx/core/view/Error.jsx";
import Home from "ilevus/jsx/core/view/Home.jsx";
import NotFound from "ilevus/jsx/core/view/NotFound.jsx";
import Search from "ilevus/jsx/core/view/Search.jsx";
import TermosPrivacidade from "ilevus/jsx/core/view/TermosPrivacidade.jsx";
import Login from "ilevus/jsx/core/view/user/Login.jsx";
import ConfirmEmail from "ilevus/jsx/core/view/user/ConfirmEmail.jsx";
import ConfirmEmailChange from "ilevus/jsx/core/view/user/ConfirmEmailChange.jsx";
import PublicProfile from "ilevus/jsx/core/view/user/PublicProfile.jsx";
import RecoverPassword from "ilevus/jsx/core/view/user/RecoverPassword.jsx";
import Register from "ilevus/jsx/core/view/user/Register.jsx";
import ResetPassword from "ilevus/jsx/core/view/user/ResetPassword.jsx";
import ProfileWizard from "ilevus/jsx/core/view/user/wizard/ProfileWizard.jsx";
import ProfileWizardBasic from "ilevus/jsx/core/view/user/wizard/ProfileWizardBasic.jsx";
import ProfileWizardAddress from "ilevus/jsx/core/view/user/wizard/ProfileWizardAddress.jsx";
import ProfileWizardEducation from "ilevus/jsx/core/view/user/wizard/ProfileWizardEducation.jsx";
import ProfileWizardCareer from "ilevus/jsx/core/view/user/wizard/ProfileWizardCareer.jsx";
import ProfileWizardServices from "ilevus/jsx/core/view/user/wizard/ProfileWizardServices.jsx";
import ProfileWizardBankAccount from "ilevus/jsx/core/view/user/wizard/ProfileWizardBankAccount.jsx";
import UserAccount from "ilevus/jsx/core/view/user/Account.jsx";
import UserDashboard from "ilevus/jsx/core/view/user/Dashboard.jsx";
import UserFinancial from "ilevus/jsx/core/view/user/Financial.jsx";
import UserManagement from "ilevus/jsx/core/view/user/Management.jsx";
import UserProfessionalProfile from "ilevus/jsx/core/view/user/ProfessionalProfile.jsx";
import UserProfile from "ilevus/jsx/core/view/user/Profile.jsx";
import UserSchedule from "ilevus/jsx/core/view/user/Schedule.jsx";
import UserViewSchedule from "ilevus/jsx/core/view/user/ViewSchedule.jsx";
import UserAssessments from "ilevus/jsx/core/view/user/Assessments.jsx";
import ProcessDefinition from "ilevus/jsx/core/view/user/coaching/CoachingProcessesDefinition.jsx";
import CoachingToolsContainer from "ilevus/jsx/core/view/user/coaching/tools/CoachingToolsContainer.jsx";
import CoachingProcesses from "ilevus/jsx/core/view/user/coaching/CoachingProcesses.jsx";
import HireProfessional from "ilevus/jsx/core/view/user/coaching/HireProfessional.jsx";
import SessionDetails from "ilevus/jsx/core/view/user/coaching/SessionDetails.jsx";
import WheelOfLifeConfigure from "ilevus/jsx/core/view/user/coaching/tools/wheeloflife/Configure.jsx";
import WheelOfLife from "ilevus/jsx/core/view/user/coaching/tools/wheeloflife/WheelOfLife.jsx";
import AdminPanel from "ilevus/jsx/core/view/admin/AdminPanel.jsx";
import AdminPanelHome from "ilevus/jsx/core/view/admin/AdminPanelHome.jsx";
import AdminPanelAds from "ilevus/jsx/core/view/admin/AdminPanelAds.jsx";
import AdminPanelApis from "ilevus/jsx/core/view/admin/AdminPanelApis.jsx";
import AdminPanelDefinitions from "ilevus/jsx/core/view/admin/AdminPanelDefinitions.jsx";
import AdminPanelModerationAds from "ilevus/jsx/core/view/admin/AdminPanelModerationAds.jsx";
import AdminPanelUsers from "ilevus/jsx/core/view/admin/AdminPanelUsers.jsx";
import AdminPanelEmails from "ilevus/jsx/core/view/admin/AdminPanelEmails.jsx";
import AdminPanelSubscriptions from "ilevus/jsx/core/view/admin/AdminPanelSubscriptions.jsx";
import AdminPanelSubscriptionsCustomer from "ilevus/jsx/core/view/admin/AdminPanelSubscriptionsCustomer.jsx";
import AdminPanelSubscriptionsDetails from "ilevus/jsx/core/view/admin/AdminPanelSubscriptionsDetails.jsx";
import AdminPanelSubscriptionsInvoice from "ilevus/jsx/core/view/admin/AdminPanelSubscriptionsInvoice.jsx";
import AdminPanelTranslate from "ilevus/jsx/core/view/admin/AdminPanelTranslate.jsx";
import AdminPanelMensagens from "ilevus/jsx/core/view/admin/AdminPanelMensagens.jsx";
import AdminPanelSitemap from "ilevus/jsx/core/view/admin/AdminPanelSitemap.jsx";
import AdminPanelReports from "ilevus/jsx/core/view/admin/AdminPanelReports.jsx";
import Notifications from "ilevus/jsx/core/view/notifications/Notifications.jsx";
import NotificationsMessages from "ilevus/jsx/core/view/notifications/NotificationsMessages.jsx";
import NotificationsTimeline from "ilevus/jsx/core/view/notifications/NotificationsTimeline.jsx";
import NotificationsDetalhes from "ilevus/jsx/core/view/notifications/DetalheNotificacao.jsx";
import Subscribe from "ilevus/jsx/core/view/user/Subscribe.jsx";
import Checkout from "ilevus/jsx/core/view/user/Checkout.jsx";
import MarkdownGuide from "ilevus/jsx/core/view/help/MarkdownGuide.jsx";

// https://github.com/diegohaz/arc/wiki/Styling
import theme from './themes/default';

injectGlobal(_templateObject);

// string config
S.TMPL_OPEN = '{';
S.TMPL_CLOSE = '}';

// Numeral configuration
Numeral.locale('pt-BR', require("numeral/locales/pt-br.js"));
Numeral.locale('es', require("numeral/locales/es.js"));
Numeral.locale("pt-BR");

//Toastr.options.positionClass = "toast-top-center";
Toastr.options.positionClass = "toast-top-full-width";
Toastr.options.timeOut = 4000;
Toastr.options.extendedTimeOut = 10000;

// Marked configuration
Marked.setOptions({
  renderer: new Marked.Renderer(),
  gfm: true,
  tables: true,
  breaks: false,
  pedantic: false,
  sanitize: true,
  smartLists: true,
  smartypants: false
});

var App = function App() {
  return React.createElement(
    'div',
    null,
    React.createElement(
      Helmet,
      { titleTemplate: 'ARc - %s' },
      React.createElement(
        'title',
        null,
        'Atomic React'
      ),
      React.createElement('meta', { charSet: 'UTF-8' }),
      React.createElement('meta', { name: 'description', content: 'React starter kit based on Atomic Design with React Router v4, Webpack, Redux, Server Side Rendering and more.' }),
      React.createElement('meta', { name: 'viewport', content: 'width=device-width, initial-scale=1.0' }),
      React.createElement('meta', { property: 'og:site_name', content: 'ARc' }),
      React.createElement('meta', { property: 'og:image', content: 'https://arc.js.org/thumbnail.png' }),
      React.createElement('meta', { property: 'og:image:type', content: 'image/png' }),
      React.createElement('meta', { property: 'og:image:width', content: '1200' }),
      React.createElement('meta', { property: 'og:image:height', content: '630' }),
      React.createElement('link', { rel: 'icon', href: 'https://arc.js.org/icon.png' })
    ),
    React.createElement(GoogleTagManager, null),
    React.createElement(
      ThemeProvider,
      { theme: theme },
      React.createElement(
        Switch,
        null,
        React.createElement(
          Route,
          { path: '/', component: Application },
          React.createElement(IndexRedirect, { to: 'home' }),
          React.createElement(Route, { path: 'home', component: Home }),
          React.createElement(Route, { path: 'login', component: Login }),
          React.createElement(Route, { path: 'auth-callback/:accessToken', component: Login }),
          React.createElement(Route, { path: 'confirm-email/:email/:token', component: ConfirmEmail }),
          React.createElement(Route, { path: 'confirm-email-change/:email/:token', component: ConfirmEmailChange }),
          React.createElement(Route, { path: 'recover-password', component: RecoverPassword }),
          React.createElement(Route, { path: 'reset-password/:email/:token', component: ResetPassword }),
          React.createElement(Route, { path: 'signup', component: Register }),
          React.createElement(Route, { path: 'termos-privacidade', component: TermosPrivacidade }),
          React.createElement(
            Route,
            { path: 'help' },
            React.createElement(IndexRoute, { component: MarkdownGuide })
          ),
          React.createElement(Route, { path: 'profile/:id', component: PublicProfile }),
          React.createElement(Route, { path: 'search/:term', component: Search }),
          React.createElement(Route, { path: 'assessments', component: UserAssessments }),
          React.createElement(
            Route,
            { path: 'user', component: UserManagement },
            React.createElement(Route, { path: 'account', component: UserAccount }),
            React.createElement(Route, { path: 'dashboard', component: CoachingProcesses }),
            React.createElement(Route, { path: 'financial', component: UserFinancial }),
            React.createElement(Route, { path: 'processes', component: ProcessDefinition }),
            React.createElement(Route, { path: 'professional-profile', component: UserProfessionalProfile }),
            React.createElement(Route, { path: 'profile', component: UserProfile }),
            React.createElement(Route, { path: 'schedule', component: UserViewSchedule }),
            React.createElement(Route, { path: 'assessments', component: UserAssessments }),
            React.createElement(Route, { path: 'schedule/configure', component: UserSchedule }),
            React.createElement(
              Route,
              { path: 'coaching-tools', component: CoachingToolsContainer },
              React.createElement(Route, { path: 'wheeloflife', component: WheelOfLifeConfigure })
            )
          ),
          React.createElement(Route, { path: 'subscribe', component: Subscribe }),
          React.createElement(Route, { path: 'checkout', component: Checkout }),
          React.createElement(
            Route,
            { path: 'coaching/process/:id' },
            React.createElement(IndexRoute, { component: SessionDetails }),
            React.createElement(
              Route,
              { path: ':session', component: SessionDetails },
              React.createElement(Route, { path: 'tools/wheeloflife', component: WheelOfLife })
            )
          ),
          React.createElement(Route, { path: 'coaching/hire/:id', component: HireProfessional }),
          React.createElement(
            Route,
            { path: 'admin', component: AdminPanel },
            React.createElement(Route, { path: 'home', component: AdminPanelHome }),
            React.createElement(Route, { path: 'ads', component: AdminPanelAds }),
            React.createElement(Route, { path: 'apis', component: AdminPanelApis }),
            React.createElement(Route, { path: 'definitions', component: AdminPanelDefinitions }),
            React.createElement(Route, { path: 'moderationads', component: AdminPanelModerationAds }),
            React.createElement(Route, { path: 'emails', component: AdminPanelEmails }),
            React.createElement(
              Route,
              { path: 'subscriptions', component: AdminPanelSubscriptions },
              'AdminPanelSubscriptionsDetails',
              React.createElement(Route, { path: 'customer/:id', component: AdminPanelSubscriptionsCustomer }),
              React.createElement(Route, { path: 'detail/:id', component: AdminPanelSubscriptionsDetails }),
              React.createElement(Route, { path: 'invoice/:id', component: AdminPanelSubscriptionsInvoice })
            ),
            React.createElement(Route, { path: 'users', component: AdminPanelUsers }),
            React.createElement(Route, { path: 'translate', component: AdminPanelTranslate }),
            React.createElement(Route, { path: 'mensagens', component: AdminPanelMensagens }),
            React.createElement(Route, { path: 'sitemap', component: AdminPanelSitemap }),
            React.createElement(Route, { path: 'reports', component: AdminPanelReports })
          ),
          React.createElement(
            Route,
            { path: 'notifications', component: Notifications },
            React.createElement(Route, { path: 'messages', component: NotificationsMessages }),
            React.createElement(Route, { path: 'messages/:destination', component: NotificationsMessages }),
            React.createElement(Route, { path: 'timeline', component: NotificationsTimeline }),
            React.createElement(Route, { path: 'timeline_detalhe/:destination', component: NotificationsDetalhes })
          ),
          React.createElement(
            Route,
            { path: 'become-a-professional', component: ProfileWizard },
            React.createElement(Route, { path: 'basic', component: ProfileWizardBasic }),
            React.createElement(Route, { path: 'address', component: ProfileWizardAddress }),
            React.createElement(Route, { path: 'education', component: ProfileWizardEducation }),
            React.createElement(Route, { path: 'career', component: ProfileWizardCareer }),
            React.createElement(Route, { path: 'services', component: ProfileWizardServices }),
            React.createElement(Route, { path: 'bankAccount', component: ProfileWizardBankAccount })
          ),
          React.createElement(Route, { path: '*', component: NotFound })
        )
      )
    )
  );
};

var _default = App;
export default _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(IndexRedirect, 'IndexRedirect', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/components/App.js');

  __REACT_HOT_LOADER__.register(IndexRoute, 'IndexRoute', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/components/App.js');

  __REACT_HOT_LOADER__.register(browserHistory, 'browserHistory', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/components/App.js');

  __REACT_HOT_LOADER__.register(hashHistory, 'hashHistory', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/components/App.js');

  __REACT_HOT_LOADER__.register(App, 'App', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/components/App.js');

  __REACT_HOT_LOADER__.register(_default, 'default', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/components/App.js');
}();

;