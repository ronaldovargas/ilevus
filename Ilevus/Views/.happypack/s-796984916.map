{"version":3,"sources":["src\\services\\validation\\index.js"],"names":["isEmpty","value","undefined","join","data","rules","map","rule","filter","error","email","url","required","minLength","length","min","maxLength","max","integer","oneOf","values","match","field","createValidator","errors","Object","keys","forEach","key","concat"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,UAAU,SAAVA,OAAU;AAAA,SAASC,UAAUC,SAAV,IAAuBD,UAAU,IAAjC,IAAyCA,UAAU,EAA5D;AAAA,CAAhB;AACA,IAAME,OAAO,SAAPA,IAAO;AAAA,SAAS,UAACF,KAAD,EAAQG,IAAR;AAAA,WACpBC,MAAMC,GAAN,CAAU;AAAA,aAAQC,KAAKN,KAAL,EAAYG,IAAZ,CAAR;AAAA,KAAV,EAAqCI,MAArC,CAA4C;AAAA,aAAS,CAAC,CAACC,KAAX;AAAA,KAA5C,EAA8D,CAA9D,CADoB;AAAA,GAAT;AAAA,CAAb;;AAGO,IAAMC,wBAAQ,SAARA,KAAQ;AAAA,SAAS,CAACV,QAAQC,KAAR,CAAD,IAAmB,CAAC,uBAAQA,KAAR,CAApB,IAC5B,uBADmB;AAAA,CAAd;;AAGA,IAAMU,oBAAM,SAANA,GAAM;AAAA,SAAS,CAACX,QAAQC,KAAR,CAAD,IAAmB,CAAC,qBAAMA,KAAN,CAApB,IAC1B,aADiB;AAAA,CAAZ;;AAGA,IAAMW,8BAAW,SAAXA,QAAW;AAAA,SAASZ,QAAQC,KAAR,KAC/B,gBADsB;AAAA,CAAjB;;AAGA,IAAMY,gCAAY,SAAZA,SAAY;AAAA,SAAO;AAAA,WAAS,CAACb,QAAQC,KAAR,CAAD,IAAmBA,MAAMa,MAAN,GAAeC,GAAlC,0BACnBA,GADmB,gBAAT;AAAA,GAAP;AAAA,CAAlB;;AAGA,IAAMC,gCAAY,SAAZA,SAAY;AAAA,SAAO;AAAA,WAAS,CAAChB,QAAQC,KAAR,CAAD,IAAmBA,MAAMa,MAAN,GAAeG,GAAlC,8BACfA,GADe,gBAAT;AAAA,GAAP;AAAA,CAAlB;;AAGA,IAAMC,4BAAU,SAAVA,OAAU;AAAA,SAAS,CAAC,qBAAMjB,KAAN,CAAD,IAC9B,oBADqB;AAAA,CAAhB;;AAGA,IAAMkB,wBAAQ,SAARA,KAAQ;AAAA,SAAU;AAAA,WAAS,CAAC,oBAAKlB,KAAL,EAAYmB,MAAZ,CAAD,yBACnBA,OAAOjB,IAAP,CAAY,IAAZ,CADU;AAAA,GAAV;AAAA,CAAd;;AAGA,IAAMkB,wBAAQ,SAARA,KAAQ;AAAA,SAAS,UAACpB,KAAD,EAAQG,IAAR;AAAA,WAAiBA,QAAQH,UAAUG,KAAKkB,KAAL,CAAlB,IAC7C,YAD4B;AAAA,GAAT;AAAA,CAAd;;AAGA,IAAMC,4CAAkB,SAAlBA,eAAkB;AAAA,SAAS,YAAe;AAAA,QAAdnB,IAAc,uEAAP,EAAO;;AACrD,QAAMoB,SAAS,EAAf;AACAC,WAAOC,IAAP,CAAYrB,KAAZ,EAAmBsB,OAAnB,CAA2B,UAACC,GAAD,EAAS;AAClC,UAAMrB,OAAOJ,KAAK,GAAG0B,MAAH,CAAUxB,MAAMuB,GAAN,CAAV,CAAL,CAAb;AACA,UAAMnB,QAAQF,KAAKH,KAAKwB,GAAL,CAAL,EAAgBxB,IAAhB,CAAd;AACA,UAAIK,KAAJ,EAAW;AACTe,eAAOI,GAAP,IAAcnB,KAAd;AACD;AACF,KAND;AAOA,WAAOe,MAAP;AACD,GAV8B;AAAA,CAAxB;;;;;;;;gCA5BDxB,O;;gCACAG,I;;gCAGOO,K;;gCAGAC,G;;gCAGAC,Q;;gCAGAC,S;;gCAGAG,S;;gCAGAE,O;;gCAGAC,K;;gCAGAE,K;;gCAGAE,e","file":"index.js","sourceRoot":"C:/Projetos/Nova pasta/ilevus/Ilevus/Views","sourcesContent":["import isEmail from 'validator/lib/isEmail'\nimport isInt from 'validator/lib/isInt'\nimport isIn from 'validator/lib/isIn'\nimport isURL from 'validator/lib/isURL'\n\nconst isEmpty = value => value === undefined || value === null || value === ''\nconst join = rules => (value, data) =>\n  rules.map(rule => rule(value, data)).filter(error => !!error)[0]\n\nexport const email = value => !isEmpty(value) && !isEmail(value) &&\n  'Invalid email address'\n\nexport const url = value => !isEmpty(value) && !isURL(value) &&\n  'Invalid URL'\n\nexport const required = value => isEmpty(value) &&\n  'Required field'\n\nexport const minLength = min => value => !isEmpty(value) && value.length < min &&\n  `Must be at least ${min} characters`\n\nexport const maxLength = max => value => !isEmpty(value) && value.length > max &&\n  `Must be no more than ${max} characters`\n\nexport const integer = value => !isInt(value) &&\n  'Must be an integer'\n\nexport const oneOf = values => value => !isIn(value, values) &&\n  `Must be one of: ${values.join(', ')}`\n\nexport const match = field => (value, data) => data && value !== data[field] &&\n  'Must match'\n\nexport const createValidator = rules => (data = {}) => {\n  const errors = {}\n  Object.keys(rules).forEach((key) => {\n    const rule = join([].concat(rules[key]))\n    const error = rule(data[key], data)\n    if (error) {\n      errors[key] = error\n    }\n  })\n  return errors\n}\n"]}