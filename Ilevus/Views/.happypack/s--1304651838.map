{"version":3,"sources":["legacy\\jsx\\core\\view\\user\\coaching\\CoachingProcessesDefinition.jsx"],"names":["S","require","React","ReactColor","Messages","UserSession","TwitterPicker","module","exports","createClass","getInitialState","newStepColor","processSteps","get","Professional","ProcessSteps","onColorPick","color","setState","hex","saveProcessSteps","dispatch","action","ACTION_UPDATE_PROCESS_STEPS","data","state","raiseStep","index","event","preventDefault","step","splice","forceUpdate","dropStep","removeStep","addStep","label","refs","value","isEmpty","push","Label","s","Color","renderSteps","length","map","bind","width","height","borderRadius","display","verticalAlign","backgroundColor","transition","render","minWidth"],"mappings":"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","file":"CoachingProcessesDefinition.jsx","sourceRoot":"C:/Projetos/Nova pasta/ilevus/Ilevus/Views","sourcesContent":["\r\nvar S = require('string');\r\nvar React = require('react');\r\nvar ReactColor = require(\"react-color\");\r\nvar Messages = require(\"ilevus/jsx/core/util/Messages.jsx\");\r\n\r\nvar UserSession = require(\"ilevus/jsx/core/store/UserSession.jsx\");\r\n\r\nvar TwitterPicker = ReactColor.TwitterPicker;\r\n\r\nmodule.exports = React.createClass({\r\n    getInitialState() {\r\n        return {\r\n            newStepColor: \"#AAAAAA\",\r\n            processSteps: UserSession.get(\"user\").Professional.Professional.ProcessSteps,\r\n        }\r\n    },\r\n\r\n    onColorPick(color) {\r\n        this.setState({ newStepColor : color.hex });\r\n    },\r\n\r\n    saveProcessSteps() {\r\n        UserSession.dispatch({\r\n            action: UserSession.ACTION_UPDATE_PROCESS_STEPS,\r\n            data: this.state.processSteps\r\n        });\r\n    },\r\n\r\n    raiseStep(index, event) {\r\n        event && event.preventDefault();\r\n        var step = this.state.processSteps[index];\r\n        this.state.processSteps.splice(index, 1);\r\n        this.state.processSteps.splice(index - 1, 0, step);\r\n        this.forceUpdate();\r\n        this.saveProcessSteps();\r\n    },\r\n    dropStep(index, event) {\r\n        event && event.preventDefault();\r\n        var step = this.state.processSteps[index];\r\n        this.state.processSteps.splice(index, 1);\r\n        this.state.processSteps.splice(index+1, 0, step);\r\n        this.forceUpdate();\r\n        this.saveProcessSteps();\r\n    },\r\n    removeStep(index, event) {\r\n        event && event.preventDefault();\r\n        this.state.processSteps.splice(index, 1);\r\n        this.forceUpdate();\r\n        this.saveProcessSteps();\r\n    },\r\n\r\n    addStep(event) {\r\n        event && event.preventDefault();\r\n        var label = S(this.refs['step-label'].value);\r\n        if (label.isEmpty()) {\r\n            return;\r\n        }\r\n        this.state.processSteps.push({\r\n            Label: label.s,\r\n            Color: this.state.newStepColor,\r\n        });\r\n        this.refs['step-label'].value = '';\r\n        this.setState({ newStepColor: '#AAAAAA' });\r\n        this.saveProcessSteps();\r\n    },\r\n\r\n    renderSteps() {\r\n        if (this.state.processSteps.length == 0) {\r\n            return <i>{Messages.get(\"TextNoProcessStepYet\")}</i>;\r\n        }\r\n\r\n        return <table className=\"ilv-table\">\r\n            <thead>\r\n                <tr>\r\n                    <th width=\"80\"></th>\r\n                    <th></th>\r\n                    <th></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {this.state.processSteps.map((step, index) => {\r\n                    return <tr key={\"process-step-\"+index}>\r\n                        <td>\r\n                            <div className=\"ilv-btn-group\">\r\n                                {index > 0 ? <button className=\"ilv-btn ilv-btn-sm ilv-btn-clean p-0\" title={Messages.get(\"LabelRaiseOneLevel\")} onClick={this.raiseStep.bind(this, index)}>\r\n                                    <i className=\"ilv-icon material-icons md-24\">&#xE316;</i>\r\n                                </button>:\"\"}\r\n                                {index < this.state.processSteps.length-1 ? <button className=\"ilv-btn ilv-btn-sm ilv-btn-clean p-0\" title={Messages.get(\"LabelDropOneLevel\")} onClick={this.dropStep.bind(this, index)}>\r\n                                    <i className=\"ilv-icon material-icons md-24\">&#xE313;</i>\r\n                                </button>:\"\"}\r\n                            </div>\r\n                        </td>\r\n                        <td>\r\n                            <span data-toggle=\"dropdown\" className=\"mr-1\"\r\n                                  style={{ width: \"20px\", height: \"20px\", borderRadius: '2px', display: 'inline-block', verticalAlign: 'middle', backgroundColor: step.Color, transition: \"all 0.5s\" }} />\r\n                            <span>{step.Label}</span>\r\n                        </td>\r\n                        <td className=\"text-right\">\r\n                            <div className=\"ilv-btn-group\">\r\n                                <button className=\"ilv-btn ilv-btn-sm ilv-btn-clean ilv-btn-block\" title={Messages.get(\"LabelDelete\")} onClick={this.removeStep.bind(this, index)}>\r\n                                    <i className=\"ilv-icon material-icons md-18\">&#xE5C9;</i>\r\n                                </button>\r\n                            </div>\r\n                        </td>\r\n                    </tr>;\r\n                })}\r\n            </tbody>\r\n        </table>;\r\n    },\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.addStep}>\r\n                    <div className=\"ilv-form-group\">\r\n                        <div className=\"ilv-media ilv-media-middle\">\r\n                            <div className=\"ilv-media-left mr-3 row\">\r\n                                <div className=\"col-sm-10\">\r\n                                    <input className=\"ilv-form-control d-inline-block\"\r\n                                        type=\"text\"\r\n                                        required={true}\r\n                                        style={{minWidth: '280px' }}\r\n                                        placeholder={Messages.get(\"LabelAddProcessStep\")}\r\n                                        ref=\"step-label\" />\r\n                                </div>\r\n                                <div className=\"col-sm-2 dropdown\">\r\n                                    <a  data-toggle=\"dropdown\" style={{ width: \"30px\", height: \"30px\", borderRadius: '2px', display: 'inline-block', backgroundColor: this.state.newStepColor }} />\r\n                                    <div className=\"dropdown-menu\" id=\"color-picker-dropdown\">\r\n                                        <TwitterPicker onChangeComplete={this.onColorPick} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"ilv-media-body\">\r\n                                <button type=\"submit\" className=\"ilv-btn ilv-btn-success\">{Messages.get(\"LabelAdd\")}</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                \r\n                {this.renderSteps()}\r\n            </div>\r\n        );\r\n    }\r\n});"]}