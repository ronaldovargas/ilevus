var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _ = require("underscore");
var S = require("string");
var moment = require("moment");
var momentRange = require("moment-range");
var React = require("react");
var Link = require("react-router").Link;

var ChatStore = require("ilevus/jsx/core/store/Chat.jsx");
var UserSession = require("ilevus/jsx/core/store/UserSession.jsx");

var LoadingGauge = require("ilevus/jsx/core/widget/LoadingGauge.jsx");
var UserIcon = require("ilevus/img/user.png");

var Messages = require("ilevus/jsx/core/util/Messages.jsx");

var POLL_INTERVAL = 500;
var showNewMessageIndicator = false;

function isConversationUpdated(old, last) {
    if ((typeof old === "undefined" ? "undefined" : _typeof(old)) != (typeof last === "undefined" ? "undefined" : _typeof(last))) {
        return true;
    }
    if (!old) {
        return false;
    }
    if (old.Id !== last.Id) {
        return true;
    }
    return old.Messages.length != last.Messages.length;
}

module.exports = React.createClass({
    displayName: "exports",

    contextTypes: {
        router: React.PropTypes.object
    },
    getInitialState: function getInitialState() {
        return {
            contacts: [],
            conversation: null,
            destination: this.props.params.destination
        };
    },
    componentDidMount: function componentDidMount() {
        var _this = this;

        var me = this;
        if (!UserSession.get("logged")) {
            this.context.router.replace("/home");
        }

        ChatStore.on("retrieve-conversation", function (conversation) {
            me.setState({
                conversation: conversation,
                lastPoll: moment()
            });
            me.pollContacts();
            _.delay(_this.pollNewMessages, POLL_INTERVAL);
        }, me);

        ChatStore.on("poll-contacts", function (contacts) {
            if (me.state.destination) {
                me.setState({
                    contacts: contacts
                });
            } else {
                if (contacts && contacts.length > 0) me.context.router.replace("/notifications/messages/" + contacts[0].PartnerId);
            }
        }, me);

        ChatStore.on("poll-new-messages", function (conversation) {
            if (isConversationUpdated(_this.state.conversation, conversation)) {
                showNewMessageIndicator = true;
                me.setState({
                    conversation: conversation,
                    lastPoll: moment()
                });
            }
            me.pollContacts();
            _.delay(_this.pollNewMessages, POLL_INTERVAL);
        }, me);

        ChatStore.on("send-message", function (msg) {
            showNewMessageIndicator = true;
            var pos = _this.state.conversation.Messages.length - 1;
            _this.state.conversation.Messages[pos] = msg;
            me.forceUpdate();
        }, me);

        if (me.state.destination) {
            ChatStore.dispatch({
                action: ChatStore.ACTION_RETRIEVE_CONVERSATION,
                data: me.state.destination
            });
        } else {
            this.pollContacts();
        }
    },
    componentWillUnmount: function componentWillUnmount() {
        ChatStore.off(null, null, this);
    },
    componentWillReceiveProps: function componentWillReceiveProps(newProps, newContext) {
        if (this.props.params.destination != newProps.params.destination) {
            this.setState({
                destination: newProps.params.destination
            });
            if (newProps.params.destination) {
                ChatStore.dispatch({
                    action: ChatStore.ACTION_RETRIEVE_CONVERSATION,
                    data: newProps.params.destination
                });
            }
        }
    },
    pollContacts: function pollContacts() {
        ChatStore.dispatch({
            action: ChatStore.ACTION_POLL_CONTACTS,
            data: {
                Since: this.state.lastPoll ? this.state.lastPoll.format("YYYY-MM-DThh:mm:ss") : "1970-01-01T00:00:00"
            }
        });
    },
    pollNewMessages: function pollNewMessages() {
        ChatStore.dispatch({
            action: ChatStore.ACTION_POLL_NEW_MESSAGES,
            data: {
                Destination: this.state.destination,
                Since: this.state.lastPoll.format("YYYY-MM-DThh:mm:ss")
            }
        });
    },
    sendMessage: function sendMessage(event) {
        event.preventDefault();
        var msg = S(this.refs['message-input'].value);
        if (msg.isEmpty()) {
            msg = S(this.refs['message-input-mobile'].value);
            if (msg.isEmpty()) return;
        }

        this.state.conversation.Messages.push({
            AuthorId: UserSession.get("user").Id,
            Content: msg.s,
            Preview: true
        });
        this.refs['message-input'].value = "";
        this.refs['message-input-mobile'].value = "";
        this.forceUpdate();
        ChatStore.dispatch({
            action: ChatStore.ACTION_SEND_MESSAGE,
            data: {
                Content: msg.s,
                Destination: this.state.conversation.Destination.Id
            }
        });
    },
    componentDidUpdate: function componentDidUpdate() {
        var chatBody = this.refs['chat-body'];
        if (chatBody) {
            if (chatBody.scrollTop + 100 >= chatBody.scrollHeight - chatBody.offsetHeight) {
                chatBody.scrollTop = chatBody.scrollHeight;
                showNewMessageIndicator = false;
            }
        }
    },
    renderChat: function renderChat() {
        var conversation = this.state.conversation;

        var dest = conversation ? conversation.Destination : {};
        var msgs = conversation ? conversation.Messages : {};
        var now = moment();
        var lastDay;
        return React.createElement(
            "div",
            { className: "ilv-chat-messages" },
            React.createElement(
                "div",
                { className: "ilv-chat-messages-header" },
                React.createElement(
                    "div",
                    { className: "ilv-media ilv-media-middle" },
                    React.createElement(
                        "div",
                        { className: "ilv-media-left" },
                        React.createElement(
                            "div",
                            { className: "ilv-avatar ilv-avatar-circle ilv-avatar-md" },
                            React.createElement("img", { src: S(dest ? dest.Image : '').isEmpty() ? UserIcon : dest.Image })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "ilv-media-body" },
                        React.createElement(
                            "span",
                            { className: "ilv-chat-list-name" },
                            dest ? dest.Name : '',
                            " ",
                            dest ? dest.Surname : ''
                        ),
                        React.createElement("p", { className: "ilv-chat-list-message" })
                    )
                )
            ),
            React.createElement(
                "div",
                null,
                !showNewMessageIndicator ? React.createElement("span", null) : React.createElement(
                    "span",
                    { className: "new-message-indicator" },
                    "novas mensagens"
                )
            ),
            React.createElement(
                "div",
                { className: "ilv-chat-messages-body", ref: "chat-body" },
                !msgs || msgs.length <= 0 || !msgs.map ? React.createElement(
                    "div",
                    { className: "ilv-chat-messages-bubble center" },
                    React.createElement(
                        "i",
                        null,
                        Messages.get("TextNoMessagesYet")
                    )
                ) : msgs.map(function (msg, idx) {
                    var day = moment(conversation.Day);
                    var creation = moment(msg.Creation);
                    var diff = moment.range(creation, now).diff("hours");
                    return React.createElement(
                        "div",
                        { className: "area-mensagem ilv-chat-messages-bubble " + (msg.AuthorId == UserSession.get("user").Id ? "out" : "in"),
                            key: "chat-msg-" + idx, style: { minWidth: "15%" } },
                        React.createElement(
                            "div",
                            { className: "ilv-media" },
                            React.createElement(
                                "div",
                                { className: "ilv-media-body" },
                                msg.Content
                            ),
                            React.createElement(
                                "div",
                                { className: "ilv-media-right horario-mensagem", style: { width: "140%", textAlign: "right" } },
                                React.createElement(
                                    "small",
                                    null,
                                    msg.Preview ? "P" : diff < 24 ? creation.format('HH:mm') : creation.format('D/MM/YYYY HH:mm')
                                )
                            )
                        )
                    );
                })
            ),
            React.createElement(
                "form",
                { className: "ilv-chat-messages-footer", onSubmit: this.sendMessage },
                React.createElement(
                    "div",
                    { className: "ilv-input-group" },
                    React.createElement("input", { className: "ilv-form-control ilv-form-control-kg",
                        type: "text",
                        ref: "message-input",
                        spellCheck: false,
                        placeholder: "Type a message..." }),
                    React.createElement(
                        "div",
                        { className: "ilv-input-group-btn" },
                        React.createElement(
                            "button",
                            { className: "ilv-btn ilv-btn-lg ilv-btn-icon ilv-btn-neutral", type: "submit" },
                            React.createElement(
                                "i",
                                { className: "ilv-icon material-icons md-24" },
                                "\uE163"
                            )
                        )
                    )
                )
            )
        );
    },
    renderChatMobile: function renderChatMobile() {
        var conversation = this.state.conversation;

        var dest = conversation ? conversation.Destination : {};
        var msgs = conversation ? conversation.Messages : {};
        var now = moment();
        var lastDay;
        return React.createElement(
            "div",
            { className: "ilv-chat-messages" },
            React.createElement(
                "div",
                { className: "ilv-chat-messages-header" },
                React.createElement(
                    "div",
                    { className: "ilv-media ilv-media-middle" },
                    React.createElement(
                        "div",
                        { className: "ilv-media-body" },
                        React.createElement(
                            "span",
                            { className: "ilv-chat-list-name" },
                            dest ? dest.Name : '',
                            " ",
                            dest ? dest.Surname : ''
                        ),
                        React.createElement("p", { className: "ilv-chat-list-message" })
                    )
                )
            ),
            React.createElement(
                "div",
                null,
                !showNewMessageIndicator ? React.createElement("span", null) : React.createElement(
                    "span",
                    { className: "new-message-indicator" },
                    "novas mensagens"
                )
            ),
            React.createElement(
                "div",
                { className: "ilv-chat-messages-body", ref: "chat-body" },
                !msgs || msgs.length <= 0 || !msgs.map ? React.createElement(
                    "div",
                    { className: "ilv-chat-messages-bubble center" },
                    React.createElement(
                        "i",
                        null,
                        Messages.get("TextNoMessagesYet")
                    )
                ) : msgs.map(function (msg, idx) {
                    var day = moment(conversation.Day);
                    var creation = moment(msg.Creation);
                    var diff = moment.range(creation, now).diff("hours");
                    return React.createElement(
                        "div",
                        { className: "area-mensagem ilv-chat-messages-bubble " + (msg.AuthorId == UserSession.get("user").Id ? "out" : "in"),
                            key: "chat-msg-" + idx },
                        React.createElement(
                            "div",
                            { className: "ilv-media" },
                            React.createElement(
                                "div",
                                { className: "ilv-media-body" },
                                msg.Content
                            ),
                            React.createElement(
                                "div",
                                { className: "ilv-media-right horario-mensagem", style: { width: "140%", textAlign: "right" } },
                                React.createElement(
                                    "small",
                                    null,
                                    msg.Preview ? "P" : diff < 24 ? creation.format('HH:mm') : creation.format('D/MM/YYYY HH:mm')
                                )
                            )
                        )
                    );
                })
            ),
            React.createElement(
                "form",
                { className: "ilv-chat-messages-footer", onSubmit: this.sendMessage },
                React.createElement(
                    "div",
                    { className: "ilv-input-group" },
                    React.createElement("input", { className: "ilv-form-control ilv-form-control-kg",
                        type: "text",
                        ref: "message-input-mobile",
                        spellCheck: false,
                        placeholder: "Type a message..." }),
                    React.createElement(
                        "div",
                        { className: "ilv-input-group-btn" },
                        React.createElement(
                            "button",
                            { className: "ilv-btn ilv-btn-lg ilv-btn-icon ilv-btn-neutral", type: "submit" },
                            React.createElement(
                                "i",
                                { className: "ilv-icon material-icons md-24" },
                                "\uE163"
                            )
                        )
                    )
                )
            )
        );
    },
    renderChatList: function renderChatList() {
        var _this2 = this;

        var items;
        var user = UserSession.get("user");
        if (!this.state.contacts || this.state.contacts.length == 0) {
            items = React.createElement(
                "i",
                { className: "ilv-chat-list-item" },
                "Nenhum contato realizado ainda."
            );
        } else {
            items = this.state.contacts.map(function (contact, idx) {
                var lastMessage = contact.LastMessage;
                var creation = lastMessage ? moment(lastMessage.Creation) : null;
                var diff = creation ? moment.range(creation, moment()).diff("hours") : null;

                var nomeCompleto = contact.PartnerName + contact.PartnerSurname;
                if (_this2.refs['search-user'].value && nomeCompleto.toUpperCase().indexOf(_this2.refs['search-user'].value.toUpperCase()) < 0) {
                    return React.createElement("div", null);
                }

                return React.createElement(
                    Link,
                    { to: "/notifications/messages/" + contact.PartnerId, className: "ilv-chat-list-item", activeClassName: "active", key: "contact-item-" + idx },
                    React.createElement(
                        "div",
                        { className: "ilv-media anv-media-middle" },
                        React.createElement(
                            "div",
                            { className: "ilv-media-left" },
                            React.createElement(
                                "div",
                                { className: "ilv-avatar ilv-avatar-circle ilv-avatar-md" },
                                React.createElement("img", { src: S(contact.PartnerImage).isEmpty() ? UserIcon : contact.PartnerImage })
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-media-body" },
                            React.createElement(
                                "span",
                                { className: "ilv-chat-list-name" },
                                contact.PartnerName,
                                " ",
                                contact.PartnerSurname
                            ),
                            React.createElement(
                                "p",
                                { className: "ilv-chat-list-message" },
                                contact.LastMessage ? contact.LastMessage.Content : ""
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-media-right" },
                            React.createElement(
                                "small",
                                { className: "ilv-text-muted" },
                                diff !== null ? diff < 24 ? creation.format('HH:mm') : creation.format('D/MM/YYYY HH:mm') : ""
                            )
                        )
                    )
                );
            });
        }

        return React.createElement(
            "div",
            { className: "ilv-chat-list" },
            React.createElement(
                "div",
                { className: "ilv-chat-list-header hidden-md-down" },
                React.createElement(
                    "div",
                    { className: "ilv-media ilv-media-middle" },
                    React.createElement(
                        "div",
                        { className: "ilv-media-body" },
                        React.createElement(
                            "div",
                            { className: "ilv-avatar ilv-avatar-circle ilv-avatar-md" },
                            React.createElement("img", { src: S(user ? user.Image : '').isEmpty() ? UserIcon : user.Image })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "ilv-media-right" },
                        React.createElement(
                            "button",
                            { className: "ilv-btn ilv-btn-icon ilv-btn-clean" },
                            React.createElement(
                                "i",
                                { className: "ilv-icon material-icons md-24" },
                                "\uE0CA"
                            )
                        )
                    )
                )
            ),
            React.createElement(
                "div",
                { className: "ilv-chat-list-search" },
                React.createElement(
                    "div",
                    { className: "ilv-input-group" },
                    React.createElement("input", { ref: "search-user", className: "ilv-form-control", type: "search", placeholder: "Search or start a new chat..." }),
                    React.createElement(
                        "div",
                        { className: "ilv-input-group-btn hidden-md-down" },
                        React.createElement(
                            "button",
                            { className: "ilv-btn ilv-btn-icon ilv-btn-neutral" },
                            React.createElement(
                                "i",
                                { className: "ilv-icon material-icons md-18" },
                                "\uE8B6"
                            )
                        )
                    )
                )
            ),
            items
        );
    },
    renderChatListMobile: function renderChatListMobile() {
        var _this3 = this;

        var items;
        var user = UserSession.get("user");
        if (!this.state.contacts || this.state.contacts.length == 0) {
            items = React.createElement(
                "i",
                { className: "ilv-chat-list-item" },
                "Nenhum contato realizado ainda."
            );
        } else {
            items = this.state.contacts.map(function (contact, idx) {
                var lastMessage = contact.LastMessage;
                var creation = lastMessage ? moment(lastMessage.Creation) : null;
                var diff = creation ? moment.range(creation, moment()).diff("hours") : null;

                var nomeCompleto = contact.PartnerName + contact.PartnerSurname;
                if (_this3.refs['search-user'].value && nomeCompleto.toUpperCase().indexOf(_this3.refs['search-user'].value.toUpperCase()) < 0) {
                    return React.createElement("div", null);
                }

                return React.createElement(
                    Link,
                    { to: "/notifications/messages/" + contact.PartnerId,
                        style: { borderBottom: "none", borderRadius: "100%" },
                        className: "ilv-chat-list-item", activeClassName: "active", key: "contact-item-" + idx },
                    React.createElement(
                        "div",
                        { className: "ilv-media anv-media-middle" },
                        React.createElement(
                            "div",
                            { className: "ilv-media-left" },
                            React.createElement(
                                "div",
                                { className: "ilv-avatar ilv-avatar-circle ilv-avatar-md" },
                                React.createElement("img", { src: S(contact.PartnerImage).isEmpty() ? UserIcon : contact.PartnerImage })
                            )
                        )
                    )
                );
            });
        }

        return React.createElement(
            "div",
            { className: "lista-fotos-usuarios" },
            items
        );

        //return <div className="ilv-chat-list">
        //    <div className="ilv-chat-list-header hidden-md-down">
        //	    <div className="ilv-media ilv-media-middle">
        //		    <div className="ilv-media-body">
        //				<div className="ilv-avatar ilv-avatar-circle ilv-avatar-md">
        //                    <img src={S(user ? user.Image : '').isEmpty() ? UserIcon : user.Image} />
        //				</div>
        //		    </div>
        //			<div className="ilv-media-right">
        //				<button className="ilv-btn ilv-btn-icon ilv-btn-clean">
        //                    <i className="ilv-icon material-icons md-24">&#xE0CA;</i>
        //				</button>
        //			</div>
        //	    </div>
        //    </div>
        //	<div className="ilv-chat-list-search">
        //		<div className="ilv-input-group">
        //	        <input ref="search-user" className="ilv-form-control" type="search" placeholder="Search or start a new chat..." />
        //			<div className="ilv-input-group-btn hidden-md-down">
        //				<button className="ilv-btn ilv-btn-icon ilv-btn-neutral">
        //                    <i className="ilv-icon material-icons md-18">&#xE8B6;</i>
        //				</button>
        //			</div>
        //		</div>
        //	</div>
        //    {items}
        //</div>;
    },
    render: function render() {
        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                { className: "ilv-chat hidden-md-down" },
                this.renderChatList(),
                this.renderChat()
            ),
            React.createElement(
                "div",
                { className: "ilv-chat painel-chat-mobile hidden-md-up", style: { maxHeight: "64vh" } },
                this.renderChatListMobile(),
                this.renderChatMobile()
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }

    __REACT_HOT_LOADER__.register(Link, "Link", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/notifications/NotificationsMessages.jsx");

    __REACT_HOT_LOADER__.register(POLL_INTERVAL, "POLL_INTERVAL", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/notifications/NotificationsMessages.jsx");

    __REACT_HOT_LOADER__.register(showNewMessageIndicator, "showNewMessageIndicator", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/notifications/NotificationsMessages.jsx");

    __REACT_HOT_LOADER__.register(isConversationUpdated, "isConversationUpdated", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/notifications/NotificationsMessages.jsx");
}();

;