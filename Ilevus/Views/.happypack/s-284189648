"use strict";

var _reactIntlCurrencyInput = require("react-intl-currency-input");

var _reactIntlCurrencyInput2 = _interopRequireDefault(_reactIntlCurrencyInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var React = require("react");
var S = require("string");
var Toastr = require("toastr");

var Messages = require("ilevus/jsx/core/util/Messages.jsx");
var CurrencyUtils = require("ilevus/jsx/core/util/CurrencyUtils.jsx");


module.exports = React.createClass({
    displayName: "exports",

    propTypes: {
        service: React.PropTypes.object.isRequired,
        onSubmit: React.PropTypes.func.isRequired,
        onCancel: React.PropTypes.func.isRequired
    },
    getDefaultProps: function getDefaultProps() {
        return { service: {} };
    },
    getInitialState: function getInitialState() {
        return {
            edit: !!this.props.service.Name,
            sellPrice: this.calcFinalPrice(this.props.service.Price),
            price: this.props.service.Price
        };
    },
    onSubmit: function onSubmit(event) {
        event.preventDefault();
        var name = S(this.refs['field-name'].value);
        if (name.isEmpty()) {
            Toastr.remove();
            Toastr.error(Messages.formatWithKeys("ValidationRequired", ['LabelService']));
            return;
        }
        var data = {
            Name: name.escapeHTML().s,
            Price: this.state.price
        };
        this.props.onSubmit(data);
    },
    onCancel: function onCancel(event) {
        event.preventDefault();
        this.props.onCancel();
    },
    calcFinalPrice: function calcFinalPrice(value) {
        if (!value) {
            return 'R$ 0';
        }
        var percMoip = value * 0.0549;
        var percImpMoip = percMoip * 0.15;
        var mktDir = 29.90;
        var comIle = 1.15;
        var calc = percMoip + percImpMoip + mktDir + comIle + value * 1;
        var sellPrice = CurrencyUtils.format(calc);
        return sellPrice;
    },
    handleChange: function handleChange(event, value, maskedValue) {
        this.setState({
            sellPrice: this.calcFinalPrice(value) || 0,
            price: value
        });
    },
    render: function render() {
        var currencyConfig = {
            locale: "pt-BR",
            formats: {
                number: {
                    BRL: {
                        style: "currency",
                        currency: "BRL",
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    }
                }
            }
        };
        return React.createElement(
            "form",
            { onSubmit: this.onSubmit },
            React.createElement(
                "fieldset",
                { className: "ilv-form-group" },
                React.createElement(
                    "label",
                    { className: "ilv-form-label", htmlFor: "serviceName" },
                    Messages.get("LabelService")
                ),
                React.createElement("input", {
                    className: "ilv-form-control",
                    type: "text",
                    spellCheck: false,
                    id: "serviceName",
                    ref: "field-name",
                    defaultValue: this.props.service.Name })
            ),
            React.createElement(
                "fieldset",
                { className: "ilv-form-group" },
                React.createElement(
                    "label",
                    { className: "ilv-form-label", htmlFor: "servicePrice" },
                    Messages.get("LabelPrice")
                ),
                React.createElement(_reactIntlCurrencyInput2.default, { currency: "BRL",
                    config: currencyConfig,
                    onChange: this.handleChange,
                    defaultValue: this.props.service.Price })
            ),
            React.createElement(
                "fieldset",
                { className: "ilv-form-group" },
                React.createElement(
                    "label",
                    { className: "ilv-form-label", htmlFor: "serviceSellPrice" },
                    Messages.get("LabelSellPrice")
                ),
                React.createElement("input", {
                    className: "ilv-form-control",
                    type: "text",
                    disabled: "disabled",
                    id: "serviceSellPrice",
                    ref: "field-sell-price",
                    value: this.state.sellPrice })
            ),
            React.createElement("input", {
                type: "submit",
                className: "ilv-btn ilv-btn-block ilv-btn-primary",
                value: this.state.edit ? Messages.get("ActionSaveOfferedService") : Messages.get("ActionAddNewOfferedService") }),
            React.createElement(
                "button",
                { className: "ilv-btn ilv-btn-block ilv-btn-clean", onClick: this.onCancel },
                Messages.get("LabelCancel")
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }
}();

;