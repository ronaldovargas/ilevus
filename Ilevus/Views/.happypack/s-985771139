var S = require("string");

var React = require("react");
var Link = require("react-router").Link;
var Toastr = require("toastr");
var AssessmentsStore = require("ilevus/jsx/core/store/Assessments.jsx");
var UserSession = require("ilevus/jsx/core/store/UserSession.jsx");
var LoadingGauge = require("ilevus/jsx/core/widget/LoadingGauge.jsx");
var Messages = require("ilevus/jsx/core/util/Messages.jsx");
var moment = require('moment');
var Select = require('react-select');

var DOM = require('react-dom');
var AutoComplete = require("react-autocomplete/build/lib/index");

module.exports = React.createClass({
    displayName: "exports",


    contextTypes: {
        router: React.PropTypes.object
    },
    getInitialState: function getInitialState() {
        return {
            loading: true,
            notifications: [],
            filtro: false,
            opcaoFiltro: "0",
            naoLidas: 0,
            avaliado: '',
            avaliador: '',
            dataIni: null,
            dataFim: null,
            programa: '',
            filtrar: false,
            filtroRating: '0',
            isUser: this.props.location.pathname.indexOf('user') >= 0 ? true : false,
            optionsRating: []
        };
    },
    componentDidMount: function componentDidMount() {
        var me = this;

        me.setState({
            optionsRating: [{ value: "0", label: Messages.get("LabelTodosRatings") }, { value: "1", label: '1 ' + Messages.get("LabelEstrela") }, { value: "2", label: '2 ' + Messages.get("LabelEstrelas") }, { value: "3", label: '3 ' + Messages.get("LabelEstrelas") }, { value: "4", label: '4 ' + Messages.get("LabelEstrelas") }, { value: "5", label: '5 ' + Messages.get("LabelEstrelas") }]
        });

        AssessmentsStore.on("receivedassessmentget", function (receiveds) {
            me.setState({
                receivedsAssessments: receiveds
            });
        }, me);

        AssessmentsStore.on("sendeddassessmentget", function (sendeds) {
            me.setState({
                sendedsAssessments: sendeds
            });
        }, me);

        var user = UserSession.get("user");
        if (this.props.location.query.userId) {
            user.Id = this.props.location.query.userId;
        }

        AssessmentsStore.dispatch({
            action: AssessmentsStore.ACTION_USER_ASSESSMENTS,
            data: user.Id
        });
        AssessmentsStore.dispatch({
            action: AssessmentsStore.ACTION_SEND_ASSESSMENTS,
            data: user.Id
        });
    },
    logChange: function logChange(val) {
        this.setState({
            filtroRating: val.value
        });
        console.log("Selected: " + JSON.stringify(val));
    },
    getDate: function getDate() {
        return new Date().toString();
    },
    ratingChanged: function ratingChanged(newRating) {
        console.log(newRating);
    },
    aplicarFiltro: function aplicarFiltro() {
        var me = this;
        if (!me.state) return;

        me.setState({
            filtrar: true
        });
    },
    listaContemItem: function listaContemItem(lista, item) {
        if (!lista) return lista;

        try {
            var filtro = lista.filter(function (value) {
                return value == item;
            });

            return filtro.length > 0;
        } catch (ex) {
            console.error(ex);
            return false;
        }
    },
    getListaProgramasFiltro: function getListaProgramasFiltro() {
        var items = this.props.location.query.feitas == 1 ? this.state.sendedsAssessments : this.state.receivedsAssessments;
        if (!items) return [];

        var lista = [];
        for (var i = 0; i < items.length; i++) {
            if (items[i].Programa) {
                if (!this.listaContemItem(lista, items[i].Programa)) lista.push(items[i].Programa);
            }
        }

        return lista;
    },
    getListaUsuariosFiltro: function getListaUsuariosFiltro() {
        var items = this.props.location.query.feitas == 1 ? this.state.sendedsAssessments : this.state.receivedsAssessments;
        if (!items) return [];

        var lista = [];
        for (var i = 0; i < items.length; i++) {
            if (this.props.location.query.feitas == 1) {
                if (items[i].DadosAvaliado) {
                    if (!this.listaContemItem(lista, items[i].DadosAvaliado.Name + ' ' + items[i].DadosAvaliado.Surname)) lista.push(items[i].DadosAvaliado.Name + ' ' + items[i].DadosAvaliado.Surname);
                }
            } else {
                if (items[i].DadosAvaliador) {
                    if (!this.listaContemItem(lista, items[i].DadosAvaliador.Name + ' ' + items[i].DadosAvaliador.Surname)) lista.push(items[i].DadosAvaliador.Name + ' ' + items[i].DadosAvaliador.Surname);
                }
            }
        }

        return lista;
    },
    componentWillUnmount: function componentWillUnmount() {
        AssessmentsStore.off(null, null, this);
    },
    getQtdeAvaliacoesRating: function getQtdeAvaliacoesRating(rate) {
        var items = this.props.location.query.feitas == 1 ? this.state.sendedsAssessments : this.state.receivedsAssessments;
        if (!items || !rate) return 0;

        var qtde = 0;
        var filtro = items.filter(function (value) {
            return value.Rating == rate;
        });

        if (filtro.length == 0) return '0%';

        var percent = 100 * filtro.length / items.length;
        return percent + '%';
    },
    getQtdeAvaliacoes: function getQtdeAvaliacoes() {
        var items = this.props.location.query.feitas == 1 ? this.state.sendedsAssessments : this.state.receivedsAssessments;
        return items ? items.length : 0;
    },
    loadMore: function loadMore() {},
    getListaFiltrada: function getListaFiltrada(lista) {
        if (!lista) return lista;

        if (!this.state.filtrar) return lista;

        var me = this;
        try {
            var retorno = lista.filter(function (value) {
                var ok = true;

                var nomeAvaliado = null;
                var nomeAvaliador = null;

                if (value.DadosAvaliado) nomeAvaliado = value.DadosAvaliado.Name + ' ' + value.DadosAvaliado.Surname;
                if (value.DadosAvaliador) nomeAvaliador = value.DadosAvaliado.Name + ' ' + value.DadosAvaliado.Surname;

                if (me.state.avaliado && nomeAvaliado && nomeAvaliado.indexOf(me.state.avaliado) < 0) ok = false;

                if (me.state.avaliador && nomeAvaliador && nomeAvaliador.indexOf(me.state.avaliador) < 0) ok = false;

                if (me.state.programa && value.Programa.indexOf(me.state.programa) < 0) ok = false;

                if (me.state.filtroRating && me.state.filtroRating != '0' && me.state.filtroRating != value.Rating) ok = false;

                var dataAval = new Date(new Date(value.Data).toDateString());

                if (me.refs['filtro-data-inicio'].value) {
                    var ini = new Date(new Date(me.refs['filtro-data-inicio'].value).toDateString());
                    ini.setDate(ini.getDate() + 1);
                    if (ini.getTime() > dataAval.getTime()) ok = false;
                }

                if (me.refs['filtro-data-final'].value) {
                    var fim = new Date(new Date(me.refs['filtro-data-final'].value).toDateString());
                    fim.setDate(fim.getDate() + 1);
                    if (fim.getTime() < dataAval.getTime()) ok = false;
                }

                return ok;
            });

            return retorno;
        } catch (ex) {
            console.error(ex);
            return lista;
        }
    },
    renderStars: function renderStars(qtde) {
        var tmp = [];
        for (var i = 0; i < qtde; i++) {
            tmp.push(i);
        }

        var stars = tmp.map(function (i) {
            return React.createElement(
                "i",
                { className: "ilv-rating-item-no-hover material-icons" },
                "\uE838"
            );
        });

        return React.createElement(
            "div",
            { className: "ilv-rating", style: { position: "absolute", right: "20px", top: "15px" } },
            React.createElement(
                "div",
                { className: "ilv-rating-list" },
                stars
            )
        );
    },
    renderUsuario: function renderUsuario(avaliacao) {
        if (this.props.location.query.feitas == 1) {
            if (avaliacao.DadosAvaliado) return React.createElement(
                "div",
                null,
                React.createElement(
                    "small",
                    null,
                    "Avaliado: ",
                    React.createElement(
                        Link,
                        { to: "/profile/" + avaliacao.DadosAvaliado.Id },
                        React.createElement(
                            "strong",
                            null,
                            avaliacao.DadosAvaliado.Name,
                            " ",
                            avaliacao.DadosAvaliado.Surname
                        )
                    )
                )
            );else return React.createElement("span", null);
        } else {
            if (avaliacao.DadosAvaliador) return React.createElement(
                "div",
                null,
                React.createElement(
                    "small",
                    null,
                    Messages.get("LabelAvaliador"),
                    ": ",
                    React.createElement(
                        Link,
                        { to: "/profile/" + avaliacao.DadosAvaliador.Id },
                        React.createElement(
                            "strong",
                            null,
                            avaliacao.DadosAvaliador.Name,
                            " ",
                            avaliacao.DadosAvaliador.Surname
                        )
                    )
                )
            );else return React.createElement("span", null);
        }
    },
    renderNotification: function renderNotification() {
        var _this = this;

        var lista;
        var items = this.getListaFiltrada(this.props.location.query.feitas == 1 ? this.state.sendedsAssessments : this.state.receivedsAssessments);
        if (!items || items.length == 0) {
            return React.createElement(
                "div",
                { className: "ilv-notification ilv-notification-unread" },
                Messages.get("LabelNenhumaAvaliacao")
            );
        }

        lista = items.map(function (contact, idx) {
            return React.createElement(
                "div",
                { className: "ilv-notification ilv-notification-unread", style: { position: "relative" } },
                React.createElement(
                    "div",
                    { className: "ilv-media ilv-media-middle" },
                    React.createElement(
                        "div",
                        { className: "ilv-media-body" },
                        React.createElement(
                            "p",
                            { className: "mb-0" },
                            contact.Titulo
                        ),
                        React.createElement(
                            "small",
                            null,
                            Messages.get("LabelData"),
                            ": ",
                            moment(contact.Data).format('DD/MM/YYYY hh:mm')
                        ),
                        React.createElement(
                            "div",
                            null,
                            React.createElement(
                                "small",
                                null,
                                Messages.get("LabelService"),
                                ": ",
                                contact.Programa
                            )
                        ),
                        _this.renderUsuario(contact),
                        React.createElement(
                            "p",
                            null,
                            contact.Descricao
                        ),
                        _this.renderStars(contact.Rating)
                    )
                )
            );
        });
        return React.createElement(
            "div",
            null,
            lista
        );
    },
    render: function render() {
        var _this2 = this;

        return React.createElement(
            "div",
            { style: { paddingTop: "10px", padding: this.props.location.pathname.indexOf('user') < 0 ? "30px" : "0px" } },
            React.createElement(
                "span",
                { style: { display: this.props.location.pathname.indexOf('user') < 0 ? "none" : "block" } },
                Messages.get("LabelFiltros")
            ),
            React.createElement(
                "div",
                { style: { padding: "8px", border: "solid 1px #cecece", display: this.props.location.pathname.indexOf('user') < 0 ? "none" : "block" } },
                React.createElement(
                    "div",
                    { className: "row" },
                    React.createElement(
                        "div",
                        { className: "col col-4" },
                        React.createElement(
                            "div",
                            { className: "ilv-form-group" },
                            React.createElement(
                                "label",
                                { className: "ilv-form-label", htmlFor: "editFiltroDataInicio" },
                                Messages.get("LabelDataInicio")
                            ),
                            React.createElement("input", { className: "ilv-form-control",
                                type: "date",
                                spellCheck: false,
                                id: "editFiltroDataInicio",
                                ref: "filtro-data-inicio" })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "col col-4" },
                        React.createElement(
                            "div",
                            { className: "ilv-form-group" },
                            React.createElement(
                                "label",
                                { className: "ilv-form-label", htmlFor: "editFiltroDataFim" },
                                Messages.get("LabelDataFinal")
                            ),
                            React.createElement("input", { className: "ilv-form-control",
                                type: "date",
                                spellCheck: false,
                                id: "editFiltroDataFim",
                                ref: "filtro-data-final" })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "col col-4" },
                        React.createElement(
                            "div",
                            { className: "ilv-form-group" },
                            React.createElement(
                                "label",
                                { className: "ilv-form-label", htmlFor: "editFiltroPrograma" },
                                Messages.get("LabelService")
                            ),
                            React.createElement(AutoComplete, { getItemValue: function getItemValue(item) {
                                    return item;
                                }, className: "ilv-form-control",
                                items: this.getListaProgramasFiltro(),
                                renderItem: function renderItem(item, isHighlighted) {
                                    return React.createElement(
                                        "div",
                                        { style: { background: isHighlighted ? 'lightgray' : 'white' } },
                                        item
                                    );
                                },
                                value: this.state.programa,
                                onChange: function onChange(e) {
                                    return _this2.setState({
                                        programa: e.target.value
                                    });
                                },
                                onSelect: function onSelect(val) {
                                    return _this2.setState({
                                        programa: val
                                    });
                                }
                            })
                        )
                    )
                ),
                React.createElement(
                    "div",
                    { className: "row" },
                    React.createElement(
                        "div",
                        { className: "col col-4", style: { display: this.props.location.query.feitas == 1 ? "none" : "block" } },
                        React.createElement(
                            "div",
                            { className: "ilv-form-group" },
                            React.createElement(
                                "label",
                                { className: "ilv-form-label", htmlFor: "editFiltroAvaliador" },
                                Messages.get("LabelAvaliador")
                            ),
                            React.createElement(AutoComplete, { getItemValue: function getItemValue(item) {
                                    return item;
                                }, className: "ilv-form-control",
                                items: this.getListaUsuariosFiltro(),
                                renderItem: function renderItem(item, isHighlighted) {
                                    return React.createElement(
                                        "div",
                                        { style: { background: isHighlighted ? 'lightgray' : 'white' } },
                                        item
                                    );
                                },
                                value: this.state.avaliador,
                                onChange: function onChange(e) {
                                    return _this2.setState({
                                        avaliador: e.target.value,
                                        avaliado: ''
                                    });
                                },
                                onSelect: function onSelect(val) {
                                    return _this2.setState({
                                        avaliador: val,
                                        avaliado: ''
                                    });
                                }
                            })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "col col-3", style: { display: this.props.location.query.feitas == 1 ? "block" : "none" } },
                        React.createElement(
                            "div",
                            { className: "ilv-form-group" },
                            React.createElement(
                                "label",
                                { className: "ilv-form-label", htmlFor: "editFiltroAvaliado" },
                                Messages.get("LabelAvaliado")
                            ),
                            React.createElement(AutoComplete, { getItemValue: function getItemValue(item) {
                                    return item;
                                }, className: "ilv-form-control",
                                items: this.getListaUsuariosFiltro(),
                                renderItem: function renderItem(item, isHighlighted) {
                                    return React.createElement(
                                        "div",
                                        { style: { background: isHighlighted ? 'lightgray' : 'white' } },
                                        item
                                    );
                                },
                                value: this.state.avaliado,
                                onChange: function onChange(e) {
                                    return _this2.setState({
                                        avaliado: e.target.value,
                                        avaliador: ''
                                    });
                                },
                                onSelect: function onSelect(val) {
                                    return _this2.setState({
                                        avaliado: val,
                                        avaliador: ''
                                    });
                                }
                            })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "col col-3" },
                        React.createElement(
                            "div",
                            { className: "ilv-form-group" },
                            React.createElement(
                                "label",
                                { className: "ilv-form-label", htmlFor: "editFiltroRating" },
                                Messages.get("LabelRating")
                            ),
                            React.createElement(Select, { name: "form-field-name",
                                value: this.state.filtroRating,
                                options: this.state.optionsRating,
                                onChange: this.logChange }),
                            React.createElement(
                                "div",
                                { className: "ilv-rating-list", style: { flexDirection: "initial", display: "none" }, id: "editFiltroRating" },
                                React.createElement(
                                    "i",
                                    { className: "ilv-rating-item material-icons" },
                                    "\uE838"
                                ),
                                React.createElement(
                                    "i",
                                    { className: "ilv-rating-item material-icons" },
                                    "\uE838"
                                ),
                                React.createElement(
                                    "i",
                                    { className: "ilv-rating-item material-icons" },
                                    "\uE838"
                                ),
                                React.createElement(
                                    "i",
                                    { className: "ilv-rating-item material-icons" },
                                    "\uE838"
                                ),
                                React.createElement(
                                    "i",
                                    { className: "ilv-rating-item material-icons" },
                                    "\uE838"
                                )
                            ),
                            React.createElement("input", { className: "ilv-form-control",
                                type: "number",
                                min: "0",
                                style: { display: "none" },
                                max: "6",
                                spellCheck: false,
                                id: "editFiltroRating2",
                                ref: "filtro-rating" })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "col col-2 center-end" },
                        React.createElement(
                            "button",
                            { onClick: function onClick() {
                                    return _this2.aplicarFiltro();
                                }, className: "ilv-btn ilv-btn-primary", ref: "aplicar-filtro", style: { width: "100%", marginTop: "12px" } },
                            Messages.get("LabelAplicar")
                        )
                    )
                )
            ),
            React.createElement(
                "ul",
                { className: "ilv-nav ilv-nav-inline ilv-nav-tabs", style: { display: this.props.location.pathname.indexOf('user') < 0 ? "none" : "block" } },
                React.createElement(
                    "li",
                    { className: "ilv-nav-item" },
                    React.createElement(
                        Link,
                        { className: "ilv-nav-link", to: "/user/assessments/?feitas=1", activeClassName: "active" },
                        Messages.get("LabelFeitas")
                    )
                ),
                React.createElement(
                    "li",
                    { className: "ilv-nav-item" },
                    React.createElement(
                        Link,
                        { className: "ilv-nav-link", to: "/user/assessments/?recebidas=1", activeClassName: "active" },
                        Messages.get("LabelRecebidas")
                    )
                ),
                React.createElement(
                    "li",
                    { className: "ilv-nav-item" },
                    React.createElement(
                        Link,
                        { className: "ilv-nav-link", to: "/user/assessments/?recebidas=0", activeClassName: "active" },
                        Messages.get("LabelPendentes")
                    )
                )
            ),
            React.createElement(
                "div",
                { className: "ilv-media ilv-media-middle mb-4", style: { paddingTop: "10px" } },
                React.createElement(
                    "div",
                    { className: "ilv-media-body" },
                    React.createElement(
                        "h4",
                        null,
                        Messages.get(this.state.isUser ? "YourAssessments" : "LabelAssessments"),
                        " (",
                        this.getQtdeAvaliacoes(),
                        ")"
                    ),
                    React.createElement(
                        "div",
                        null,
                        React.createElement(
                            "small",
                            null,
                            "1 ",
                            Messages.get("LabelEstrela"),
                            ": ",
                            this.getQtdeAvaliacoesRating(1),
                            " | 2 ",
                            Messages.get("LabelEstrelas"),
                            ": ",
                            this.getQtdeAvaliacoesRating(2),
                            " | 3 ",
                            Messages.get("LabelEstrelas"),
                            ": ",
                            this.getQtdeAvaliacoesRating(3),
                            " | 4 ",
                            Messages.get("LabelEstrelas"),
                            ": ",
                            this.getQtdeAvaliacoesRating(4),
                            " | 5 ",
                            Messages.get("LabelEstrelas"),
                            ": ",
                            this.getQtdeAvaliacoesRating(5)
                        )
                    )
                )
            ),
            React.createElement(
                "div",
                { className: "ilv-notification-list" },
                this.renderNotification(),
                React.createElement(
                    "div",
                    { className: "text-center py-3" },
                    React.createElement(
                        "a",
                        { style: { cursor: "pointer" }, onClick: this.loadMore },
                        Messages.get("LoadMoreAssessments")
                    )
                )
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }

    __REACT_HOT_LOADER__.register(Link, "Link", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/user/Assessments.jsx");
}();

;