"use strict";

var React = require("react");
var Link = require("react-router").Link;
var Toastr = require("toastr");

var SystemStore = require("ilevus/jsx/core/store/System.jsx");
var UserSession = require("ilevus/jsx/core/store/UserSession.jsx");

var LoadingGauge = require("ilevus/jsx/core/widget/LoadingGauge.jsx");

var Messages = require("ilevus/jsx/core/util/Messages.jsx");

module.exports = React.createClass({
    displayName: "exports",

    contextTypes: {
        router: React.PropTypes.object
    },
    getInitialState: function getInitialState() {
        return {
            loading: true
        };
    },
    componentDidMount: function componentDidMount() {
        var me = this;
        SystemStore.on("retrieve-config", function (config) {
            me.setState({
                loading: false,
                config: config
            });
        }, me);
        SystemStore.on("update-config-apis", function (config) {
            Toastr.remove();
            Toastr.success(Messages.get("TextDataSavedSuccessfully"));
            $("button").removeAttr("disabled");
        }, me);
        SystemStore.on("fail", function (msg) {
            $("button").removeAttr("disabled");
        }, me);

        SystemStore.dispatch({
            action: SystemStore.ACTION_RETRIEVE_CONFIG
        });
    },
    componentWillUnmount: function componentWillUnmount() {
        SystemStore.off(null, null, this);
    },
    saveApiConfigs: function saveApiConfigs(event) {
        event.preventDefault();

        SystemStore.dispatch({
            action: SystemStore.ACTION_UPDATE_CONFIG_APIS,
            data: {
                MoipBaseUrl: this.refs['MoipBaseUrl'].value,
                MoipToken: this.refs['MoipToken'].value,
                MoipKey: this.refs['MoipKey'].value,
                MoipSubscriptionKey: this.refs['MoipSubscriptionKey'].value,
                MoipSubscriptionCode: this.refs['MoipSubscriptionCode'].value,
                MoipCryptoPublicKey: this.refs['MoipCryptoPublicKey'].value
            }
        });
    },
    render: function render() {
        if (this.state.loading) {
            return React.createElement(LoadingGauge, null);
        }
        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                { className: "ilv-card" },
                React.createElement(
                    "div",
                    { className: "ilv-card-header" },
                    React.createElement(
                        "strong",
                        null,
                        Messages.get("LabelMoipConfiguration")
                    )
                ),
                React.createElement(
                    "div",
                    { className: "ilv-card-body" },
                    React.createElement(
                        "form",
                        { onSubmit: this.saveApiConfigs },
                        React.createElement(
                            "div",
                            { className: "ilv-form-group" },
                            React.createElement(
                                "label",
                                { className: "ilv-form-label" },
                                Messages.get("LabelMoipBaseUrl")
                            ),
                            React.createElement("input", { className: "ilv-form-control", type: "url", spellCheck: false, ref: "MoipBaseUrl", defaultValue: this.state.config.MoipBaseUrl })
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-form-group" },
                            React.createElement(
                                "label",
                                { className: "ilv-form-label" },
                                Messages.get("LabelMoipToken")
                            ),
                            React.createElement("input", { className: "ilv-form-control", type: "text", spellCheck: false, ref: "MoipToken", defaultValue: this.state.config.MoipToken })
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-form-group" },
                            React.createElement(
                                "label",
                                { className: "ilv-form-label" },
                                Messages.get("LabelMoipKey")
                            ),
                            React.createElement("input", { className: "ilv-form-control", type: "text", spellCheck: false, ref: "MoipKey", defaultValue: this.state.config.MoipKey })
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-form-group" },
                            React.createElement(
                                "label",
                                { className: "ilv-form-label" },
                                Messages.get("LabelMoipSubscriptionKey")
                            ),
                            React.createElement("input", { className: "ilv-form-control", type: "text", spellCheck: false, ref: "MoipSubscriptionKey", defaultValue: this.state.config.MoipSubscriptionKey })
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-form-group" },
                            React.createElement(
                                "label",
                                { className: "ilv-form-label" },
                                Messages.get("LabelMoipSubscriptionCode")
                            ),
                            React.createElement("input", { className: "ilv-form-control", type: "text", spellCheck: false, ref: "MoipSubscriptionCode", defaultValue: this.state.config.MoipSubscriptionCode })
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-form-group" },
                            React.createElement(
                                "label",
                                { className: "ilv-form-label" },
                                Messages.get("LabelMoipCryptoPublicKey")
                            ),
                            React.createElement("textarea", { className: "ilv-form-control", spellCheck: false, ref: "MoipCryptoPublicKey", defaultValue: this.state.config.MoipCryptoPublicKey })
                        ),
                        React.createElement(
                            "button",
                            { type: "submit", className: "ilv-btn ilv-btn-success" },
                            Messages.get("LabelSave")
                        )
                    )
                )
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }

    __REACT_HOT_LOADER__.register(Link, "Link", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/admin/AdminPanelApis.jsx");
}();

;