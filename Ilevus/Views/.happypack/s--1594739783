
var _ = require("underscore");
var S = require("string");
var moment = require("moment");
var React = require("react");
var Messages = require("ilevus/jsx/core/util/Messages.jsx");

var LoadingGauge = require("ilevus/jsx/core/widget/LoadingGauge.jsx");

var ModalAd = require("ilevus/jsx/core/widget/admin/AdModal.jsx");

var UserSession = require("ilevus/jsx/core/store/UserSession.jsx");
var AdStore = require("ilevus/jsx/core/store/Ad.jsx");
var SystemStore = require("ilevus/jsx/core/store/System.jsx");

module.exports = React.createClass({
    displayName: "exports",

    propTypes: {
        ad: React.PropTypes.object,
        onSubmit: React.PropTypes.func.isRequired,
        onCancel: React.PropTypes.func.isRequired
    },
    getDefaultProps: function getDefaultProps() {
        return {
            ad: null,
            onSubmit: null,
            onCancel: null
        };
    },
    getInitialState: function getInitialState() {
        return {
            saving: false,
            activated: this.props.ad ? this.props.ad.Active : false,
            keywords: this.props.ad ? this.props.ad.Keywords : []
        };
    },
    componentDidMount: function componentDidMount() {
        var me = this;
        AdStore.on("save-ad", function (ad) {
            me.setState({
                saving: false
            });
            me.props.onSubmit(ad);
        }, me);
        AdStore.on("fail", function (meeting) {
            me.setState({
                saving: false
            });
        }, me);
        SystemStore.on("retrieve-definition-config", function (config) {
            me.setState({
                loading: false,
                config: config
            });
        }, me);
        SystemStore.dispatch({
            action: SystemStore.ACTION_RETRIEVE_DEFINITIONS
        });

        jQuery("#txtbxDailyBudgetCap").maskMoney({ thousands: ".", decimal: ",", prefix: "R$ ", allowZero: true });
        jQuery("#txtbxDailyBudgetCap").trigger('mask.maskMoney');
    },
    componentWillUnmount: function componentWillUnmount() {
        AdStore.off(null, null, this);
    },
    alertAdInfoSize: function alertAdInfoSize(dimensao, event) {
        event && event.preventDefault();
        ModalAd.alert(Messages.get("ActionAdImageMaxSize"), React.createElement(
            "p",
            null,
            Messages.get("TextAdImageMaxSize").replace("{0}", dimensao)
        ), "image_desktop");
    },
    cancel: function cancel(event) {
        event && event.preventDefault();
        this.props.onCancel();
    },
    saveAd: function saveAd(event) {
        event && event.preventDefault();
        this.setState({
            saving: true
        });
        AdStore.dispatch({
            action: AdStore.ACTION_SAVE,
            data: {
                Id: this.props.ad ? this.props.ad.Id : undefined,
                Headline: this.refs['headline'].value.substring(0, 100),
                //Image: this.refs['image'].value,
                Image_Desktop: this.refs['image_desktop'].value,
                Image_Mobile: this.refs['image_mobile'].value,
                Image_Desktop_old: this.refs['image_desktop_old'].value,
                Image_Mobile_old: this.refs['image_mobile_old'].value,
                Link: this.refs['link'].value,
                DailyBudgetCap: this.refs['DailyBudgetCap'].value,
                Active: this.state.activated,
                Keywords: this.state.keywords
            }
        });
    },
    addKeyword: function addKeyword(event) {
        event && event.preventDefault();
        var keyword = S(this.refs['keyword'].value);
        if (!keyword.isEmpty()) {
            this.state.keywords.push(keyword.s);
            this.refs['keyword'].value = "";
            this.forceUpdate();
        }
    },
    removeKeyword: function removeKeyword(index, event) {
        event && event.preventDefault();
        this.state.keywords.splice(index, 1);
        this.forceUpdate();
    },
    activatedChange: function activatedChange() {
        this.setState({
            activated: !this.state.activated
        });
    },
    uploadDesktopImage: function uploadDesktopImage(imageLimitSize, event) {
        event && event.preventDefault();
        ModalAd.mostrar(imageLimitSize, Messages.get("ActionSendImageDesktop"), React.createElement(
            "p",
            null,
            Messages.get("TextSendImageDesktop")
        ), "image_desktop", false);
    },
    uploadMobileImage: function uploadMobileImage(imageLimitSize, event) {
        event && event.preventDefault();
        ModalAd.mostrar(imageLimitSize, Messages.get("ActionSendImageMobile"), React.createElement(
            "p",
            null,
            Messages.get("TextSendImageMobile")
        ), "image_mobile", true);
    },
    render: function render() {
        var _this = this;

        if (!this.state.config) return React.createElement(LoadingGauge, null);

        var limitSize = this.state.config ? JSON.parse(this.state.config.definitions).AdsMaxSize : 0;
        var pathImage = this.state.config ? JSON.parse(this.state.config.definitions).UrlRetriviedAds : "";

        return React.createElement(
            "div",
            { className: "row" },
            React.createElement(
                "div",
                { className: "col" },
                React.createElement(
                    "h4",
                    null,
                    !this.props.ad ? Messages.get("LabelNewAd") : Messages.get("LabelEditAd")
                ),
                React.createElement(
                    "form",
                    { onSubmit: this.saveAd },
                    React.createElement(
                        "div",
                        { className: "ilv-form-group" },
                        React.createElement(
                            "label",
                            { className: "ilv-form-label" },
                            Messages.get("LabelHeadline")
                        ),
                        React.createElement("input", { className: "ilv-form-control", type: "text", spellCheck: false, ref: "headline", maxLength: "100", defaultValue: this.props.ad ? this.props.ad.Headline : "" })
                    ),
                    React.createElement(
                        "div",
                        { className: "ilv-form-group" },
                        React.createElement(
                            "label",
                            { className: "ilv-form-label" },
                            Messages.get("LabelAdImageDesktop")
                        ),
                        React.createElement(
                            "labal",
                            { id: "lbl_image_desktop" },
                            this.props.ad ? React.createElement("img", { src: (this.state.config ? JSON.parse(this.state.config.definitions).UrlRetriviedAds : "") + this.props.ad.ImageDesktop, style: { width: "150px" } }) : ""
                        ),
                        React.createElement("br", null),
                        React.createElement(
                            "button",
                            { className: "ilv-btn ilv-btn-neutral", onClick: this.uploadDesktopImage.bind(this, limitSize) },
                            Messages.get("ActionSendImageDesktop")
                        ),
                        "\xA0\xA0",
                        React.createElement(
                            "a",
                            { href: "javascript:;", onClick: this.alertAdInfoSize.bind(this, "240px X 475px") },
                            React.createElement(
                                "i",
                                { className: "fa fa-2x fa-info-circle" },
                                " "
                            )
                        ),
                        React.createElement("input", { type: "hidden", id: "image_desktop_old", ref: "image_desktop_old", defaultValue: this.props.ad ? this.props.ad.ImageDesktop : "" }),
                        React.createElement("input", { type: "hidden", ref: "image_desktop", id: "image_desktop" })
                    ),
                    React.createElement(
                        "div",
                        { className: "ilv-form-group" },
                        React.createElement(
                            "label",
                            { className: "ilv-form-label" },
                            Messages.get("LabelAdImageMobile")
                        ),
                        React.createElement(
                            "labal",
                            { id: "lbl_image_mobile" },
                            this.props.ad ? React.createElement("img", { src: (this.state.config ? JSON.parse(this.state.config.definitions).UrlRetriviedAds : "") + this.props.ad.ImageMobile, style: { width: "150px" } }) : ""
                        ),
                        React.createElement("br", null),
                        React.createElement(
                            "button",
                            { className: "ilv-btn ilv-btn-neutral", onClick: this.uploadMobileImage.bind(this, limitSize) },
                            Messages.get("ActionSendImageMobile")
                        ),
                        "\xA0\xA0",
                        React.createElement(
                            "a",
                            { href: "javascript:;", onClick: this.alertAdInfoSize.bind(this, "280px X 115px") },
                            React.createElement(
                                "i",
                                { className: "fa fa-2x fa-info-circle" },
                                " "
                            )
                        ),
                        React.createElement("input", { type: "hidden", id: "image_mobile_old", ref: "image_mobile_old", defaultValue: this.props.ad ? this.props.ad.ImageMobile : "" }),
                        React.createElement("input", { type: "hidden", ref: "image_mobile", id: "image_mobile" })
                    ),
                    React.createElement(
                        "div",
                        { className: "ilv-form-group" },
                        React.createElement(
                            "label",
                            { className: "ilv-form-label" },
                            Messages.get("LabelAdUrl")
                        ),
                        React.createElement("input", { className: "ilv-form-control", type: "url", spellCheck: false, ref: "link", defaultValue: this.props.ad ? this.props.ad.Link : "" })
                    ),
                    React.createElement(
                        "div",
                        { className: "ilv-form-group" },
                        React.createElement(
                            "label",
                            { className: "ilv-form-label" },
                            Messages.get("LabelAdDailyBudgetCap")
                        ),
                        React.createElement("input", { className: "ilv-form-control", type: "text", spellCheck: false, id: "txtbxDailyBudgetCap", ref: "DailyBudgetCap", defaultValue: this.props.ad ? parseFloat(this.props.ad.DailyBudgetCap).toFixed(2) : parseFloat(0).toFixed(2) })
                    ),
                    React.createElement(
                        "fieldset",
                        { className: "ilv-form-group" },
                        React.createElement(
                            "label",
                            { className: "ilv-form-label" },
                            Messages.get("LabelKeywords")
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-input-group" },
                            React.createElement("input", { className: "ilv-form-control", type: "text", spellCheck: false, ref: "keyword" }),
                            React.createElement(
                                "div",
                                { className: "ilv-input-group-btn" },
                                React.createElement(
                                    "button",
                                    { className: "ilv-btn ilv-btn-lg ilv-btn-icon ilv-btn-success", onClick: this.addKeyword },
                                    React.createElement(
                                        "i",
                                        { className: "ilv-icon material-icons md-24" },
                                        "\uE145"
                                    )
                                )
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-tag-input m-b-1 ilv-text-xs-center", style: { backgroundColor: '#f5f7f9' }, readOnly: true },
                            this.state.keywords.length == 0 ? React.createElement(
                                "i",
                                null,
                                Messages.get("TextNoKeywordsAddedYet")
                            ) : this.state.keywords.map(function (keyword, index) {
                                return React.createElement(
                                    "span",
                                    { className: "ilv-tag", key: "keyword-" + index },
                                    keyword,
                                    React.createElement(
                                        "a",
                                        { title: Messages.get("ActionRemove"), onClick: _this.removeKeyword.bind(_this, index) },
                                        "\xD7"
                                    )
                                );
                            })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "ilv-form-group" },
                        React.createElement(
                            "div",
                            { className: "ilv-checkbox" },
                            React.createElement(
                                "label",
                                { htmlFor: "ad-activated" },
                                React.createElement("input", { className: "ilv-control-input", type: "checkbox", id: "ad-activated", name: "ad-activated", onChange: this.activatedChange, checked: this.state.activated }),
                                React.createElement("span", { className: "ilv-control-indicator" }),
                                React.createElement(
                                    "span",
                                    { className: "ilv-control-label" },
                                    Messages.get("LabelAdActivated")
                                )
                            )
                        )
                    ),
                    React.createElement("input", { className: "ilv-btn ilv-btn-lg ilv-btn-primary", type: "submit", value: Messages.get("LabelSave"), disabled: this.state.saving }),
                    React.createElement("input", { className: "ilv-btn ilv-btn-lg ilv-btn-clean", type: "button", value: Messages.get("LabelCancel"), onClick: this.cancel })
                )
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }
}();

;