import isEmail from 'validator/lib/isEmail';
import isInt from 'validator/lib/isInt';
import isIn from 'validator/lib/isIn';
import isURL from 'validator/lib/isURL';

var isEmpty = function isEmpty(value) {
  return value === undefined || value === null || value === '';
};
var join = function join(rules) {
  return function (value, data) {
    return rules.map(function (rule) {
      return rule(value, data);
    }).filter(function (error) {
      return !!error;
    })[0];
  };
};

export var email = function email(value) {
  return !isEmpty(value) && !isEmail(value) && 'Invalid email address';
};

export var url = function url(value) {
  return !isEmpty(value) && !isURL(value) && 'Invalid URL';
};

export var required = function required(value) {
  return isEmpty(value) && 'Required field';
};

export var minLength = function minLength(min) {
  return function (value) {
    return !isEmpty(value) && value.length < min && 'Must be at least ' + min + ' characters';
  };
};

export var maxLength = function maxLength(max) {
  return function (value) {
    return !isEmpty(value) && value.length > max && 'Must be no more than ' + max + ' characters';
  };
};

export var integer = function integer(value) {
  return !isInt(value) && 'Must be an integer';
};

export var oneOf = function oneOf(values) {
  return function (value) {
    return !isIn(value, values) && 'Must be one of: ' + values.join(', ');
  };
};

export var match = function match(field) {
  return function (value, data) {
    return data && value !== data[field] && 'Must match';
  };
};

export var createValidator = function createValidator(rules) {
  return function () {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var errors = {};
    Object.keys(rules).forEach(function (key) {
      var rule = join([].concat(rules[key]));
      var error = rule(data[key], data);
      if (error) {
        errors[key] = error;
      }
    });
    return errors;
  };
};
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(isEmpty, 'isEmpty', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/services/validation/index.js');

  __REACT_HOT_LOADER__.register(join, 'join', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/services/validation/index.js');

  __REACT_HOT_LOADER__.register(email, 'email', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/services/validation/index.js');

  __REACT_HOT_LOADER__.register(url, 'url', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/services/validation/index.js');

  __REACT_HOT_LOADER__.register(required, 'required', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/services/validation/index.js');

  __REACT_HOT_LOADER__.register(minLength, 'minLength', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/services/validation/index.js');

  __REACT_HOT_LOADER__.register(maxLength, 'maxLength', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/services/validation/index.js');

  __REACT_HOT_LOADER__.register(integer, 'integer', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/services/validation/index.js');

  __REACT_HOT_LOADER__.register(oneOf, 'oneOf', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/services/validation/index.js');

  __REACT_HOT_LOADER__.register(match, 'match', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/services/validation/index.js');

  __REACT_HOT_LOADER__.register(createValidator, 'createValidator', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/services/validation/index.js');
}();

;