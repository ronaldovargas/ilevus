{"version":3,"sources":["src\\containers\\PostList.js"],"names":["PostListContainer","props","readList","hasServerState","setServerState","cleanServerState","then","list","loading","failed","propTypes","arrayOf","object","isRequired","limit","number","bool","func","defaultProps","mapStateToProps","getList","state","mapDispatchToProps","dispatch","_limit","withServerState","data","actions","done"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;IAEMA,iB;;;;;;;;;;;yCAgBiB;AAAA,mBAGf,KAAKC,KAHU;AAAA,UAEjBC,QAFiB,UAEjBA,QAFiB;AAAA,UAEPC,cAFO,UAEPA,cAFO;AAAA,UAESC,cAFT,UAESA,cAFT;AAAA,UAEyBC,gBAFzB,UAEyBA,gBAFzB;;;AAKnB,UAAI,CAACF,cAAL,EAAqB;AACnB,8BAAc;AACZD,qBAAWI,IAAX,CAAgBF,cAAhB,EAAgCA,cAAhC;AACD,SAFD,MAEO;AACLF;AACD;AACF,OAND,MAMO,uBAAe;AACpBG;AACD;AACF;;;6BAEQ;AAAA,oBAC2B,KAAKJ,KADhC;AAAA,UACCM,IADD,WACCA,IADD;AAAA,UACOC,OADP,WACOA,OADP;AAAA,UACgBC,MADhB,WACgBA,MADhB;;AAEP,aAAO,oDAAc,EAAEF,UAAF,EAAQC,gBAAR,EAAiBC,cAAjB,EAAd,CAAP;AACD;;;;;;AAnCGT,iB,CACGU,S,GAAY;AACjBH,QAAM,oBAAUI,OAAV,CAAkB,oBAAUC,MAA5B,EAAoCC,UADzB;AAEjBC,SAAO,oBAAUC,MAFA;AAGjBP,WAAS,oBAAUQ,IAHF;AAIjBP,UAAQ,oBAAUO,IAJD;AAKjBd,YAAU,oBAAUe,IAAV,CAAeJ,UALR;AAMjBV,kBAAgB,oBAAUa,IANT;AAOjBZ,kBAAgB,oBAAUa,IAAV,CAAeJ,UAPd;AAQjBR,oBAAkB,oBAAUY,IAAV,CAAeJ;AARhB,C;AADfb,iB,CAYGkB,Y,GAAe;AACpBJ,SAAO;AADa,C;;;AA0BxB,IAAMK,kBAAkB,SAAlBA,eAAkB;AAAA,SAAU;AAChCZ,UAAM,wBAAaa,OAAb,CAAqBC,KAArB,EAA4B,OAA5B,EAAqC,wBAAaD,OAAb,CAAqBC,KAArB,EAA4B,OAA5B,CAArC,CAD0B;AAEhCb,aAAS,+BAAUa,KAAV,EAAiB,eAAjB,CAFuB;AAGhCZ,YAAQ,+BAAUY,KAAV,EAAiB,eAAjB;AAHwB,GAAV;AAAA,CAAxB;;AAMA,IAAMC,qBAAqB,SAArBA,kBAAqB,CAACC,QAAD;AAAA,MAAaT,KAAb,QAAaA,KAAb;AAAA,SAA0B;AACnDZ,cAAU;AAAA,aAAMqB,SAAS,sCAAwB,OAAxB,EAAiC,EAAEC,QAAQV,KAAV,EAAjC,CAAT,CAAN;AAAA;AADyC,GAA1B;AAAA,CAA3B;;AAIA,IAAMW,kBAAkB,mCACtB;AAAA,SAAU;AACRtB,oBAAgB,CAAC,CAACkB,MAAMK;AADhB,GAAV;AAAA,CADsB,EAItB;AAAA,SAAY;AACVtB,oBAAgB;AAAA,aAAQuB,QAAQC,IAAR,CAAa,EAAEF,UAAF,EAAb,CAAR;AAAA,KADN;AAEVrB,sBAAkB;AAAA,aAAMsB,QAAQC,IAAR,EAAN;AAAA;AAFR,GAAZ;AAAA,CAJsB,CAAxB;;eAUeH,gBAAgB,yBAAQN,eAAR,EAAyBG,kBAAzB,EAA6CtB,iBAA7C,CAAhB,C;;;;;;;;;;gCA1DTA,iB;;gCAsCAmB,e;;gCAMAG,kB;;gCAIAG,e","file":"PostList.js","sourceRoot":"C:/Projetos/Nova pasta/ilevus/Ilevus/Views","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { fetchState } from 'react-router-server'\r\nimport { isPending, hasFailed } from 'redux-saga-thunk'\r\nimport { fromEntities, fromResource } from 'store/selectors'\r\nimport { resourceListReadRequest } from 'store/actions'\r\nimport { isBrowser, isServer } from 'config'\r\n\r\nimport { PostList } from 'components'\r\n\r\nclass PostListContainer extends Component {\r\n  static propTypes = {\r\n    list: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    limit: PropTypes.number,\r\n    loading: PropTypes.bool,\r\n    failed: PropTypes.bool,\r\n    readList: PropTypes.func.isRequired,\r\n    hasServerState: PropTypes.bool,\r\n    setServerState: PropTypes.func.isRequired,\r\n    cleanServerState: PropTypes.func.isRequired,\r\n  }\r\n\r\n  static defaultProps = {\r\n    limit: 20,\r\n  }\r\n\r\n  componentWillMount() {\r\n    const {\r\n      readList, hasServerState, setServerState, cleanServerState,\r\n    } = this.props\r\n\r\n    if (!hasServerState) {\r\n      if (isServer) {\r\n        readList().then(setServerState, setServerState)\r\n      } else {\r\n        readList()\r\n      }\r\n    } else if (isBrowser) {\r\n      cleanServerState()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { list, loading, failed } = this.props\r\n    return <PostList {...{ list, loading, failed }} />\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  list: fromEntities.getList(state, 'posts', fromResource.getList(state, 'posts')),\r\n  loading: isPending(state, 'postsListRead'),\r\n  failed: hasFailed(state, 'postsListRead'),\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch, { limit }) => ({\r\n  readList: () => dispatch(resourceListReadRequest('posts', { _limit: limit })),\r\n})\r\n\r\nconst withServerState = fetchState(\r\n  state => ({\r\n    hasServerState: !!state.data,\r\n  }),\r\n  actions => ({\r\n    setServerState: data => actions.done({ data }),\r\n    cleanServerState: () => actions.done(),\r\n  })\r\n)\r\n\r\nexport default withServerState(connect(mapStateToProps, mapDispatchToProps)(PostListContainer))\r\n"]}