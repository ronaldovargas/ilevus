var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

// https://github.com/diegohaz/arc/wiki/Reducers
// https://github.com/diegohaz/arc/wiki/Example-redux-modules#resource
import findIndex from 'lodash/findIndex';
import get from 'lodash/get';
import { initialState, getResourceState, getList, getDetail } from './selectors';
import { RESOURCE_CREATE_SUCCESS, RESOURCE_LIST_READ_REQUEST, RESOURCE_LIST_READ_SUCCESS, RESOURCE_DETAIL_READ_REQUEST, RESOURCE_DETAIL_READ_SUCCESS, RESOURCE_UPDATE_SUCCESS, RESOURCE_DELETE_SUCCESS } from './actions';

var updateOrDeleteReducer = function updateOrDeleteReducer(state, _ref) {
  var type = _ref.type,
      payload = _ref.payload,
      meta = _ref.meta;

  var resource = get(meta, 'resource');
  var needle = get(meta, 'request.needle');
  var needleIsObject = (typeof needle === 'undefined' ? 'undefined' : _typeof(needle)) === 'object';
  var list = getList(state, resource);
  var index = needleIsObject ? findIndex(list, needle) : list.indexOf(needle);

  if (index < 0) {
    return state;
  }

  switch (type) {
    case RESOURCE_UPDATE_SUCCESS:
      return _extends({}, state, _defineProperty({}, resource, _extends({}, getResourceState(state, resource), {
        list: [].concat(_toConsumableArray(list.slice(0, index)), [needleIsObject ? _extends({}, list[index], payload) : payload], _toConsumableArray(list.slice(index + 1)))
      })));
    case RESOURCE_DELETE_SUCCESS:
      return _extends({}, state, _defineProperty({}, resource, _extends({}, getResourceState(state, resource), {
        list: [].concat(_toConsumableArray(list.slice(0, index)), _toConsumableArray(list.slice(index + 1)))
      })));
    // istanbul ignore next
    default:
      return state;
  }
};

var _default = function _default() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var _ref2 = arguments[1];
  var type = _ref2.type,
      payload = _ref2.payload,
      meta = _ref2.meta;

  var resource = get(meta, 'resource');

  if (!resource) {
    return state;
  }

  switch (type) {
    case RESOURCE_CREATE_SUCCESS:
      return _extends({}, state, _defineProperty({}, resource, _extends({}, getResourceState(state, resource), {
        list: [payload].concat(_toConsumableArray(getList(state, resource)))
      })));

    case RESOURCE_LIST_READ_REQUEST:
      return _extends({}, state, _defineProperty({}, resource, _extends({}, getResourceState(state, resource), {
        list: getList(initialState, resource)
      })));
    case RESOURCE_LIST_READ_SUCCESS:
      return _extends({}, state, _defineProperty({}, resource, _extends({}, getResourceState(state, resource), {
        list: payload
      })));

    case RESOURCE_DETAIL_READ_REQUEST:
      return _extends({}, state, _defineProperty({}, resource, _extends({}, getResourceState(state, resource), {
        detail: getDetail(initialState, resource)
      })));
    case RESOURCE_DETAIL_READ_SUCCESS:
      return _extends({}, state, _defineProperty({}, resource, _extends({}, getResourceState(state, resource), {
        detail: payload
      })));

    case RESOURCE_UPDATE_SUCCESS:
    case RESOURCE_DELETE_SUCCESS:
      return updateOrDeleteReducer(state, { type: type, payload: payload, meta: meta });

    default:
      return state;
  }
};

export default _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(updateOrDeleteReducer, 'updateOrDeleteReducer', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/store/resource/reducer.js');

  __REACT_HOT_LOADER__.register(_default, 'default', 'C:/Projetos/Nova pasta/ilevus/Ilevus/Views/src/store/resource/reducer.js');
}();

;