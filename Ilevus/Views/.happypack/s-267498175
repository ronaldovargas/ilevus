
var _ = require("underscore");
var $ = require("jquery");
var S = require("string");
var React = require("react");
var Link = require("react-router").Link;
var Toastr = require("toastr");

var UserSession = require("ilevus/jsx/core/store/UserSession.jsx");
var UserStore = require("ilevus/jsx/core/store/User.jsx");

var AdSideBar = require("ilevus/jsx/core/widget/AdSideBar.jsx");
var AdRowBar = require("ilevus/jsx/core/widget/AdRowBar.jsx");

var LoadingGauge = require("ilevus/jsx/core/widget/LoadingGauge.jsx");
var Modal = require("ilevus/jsx/core/widget/Modal.jsx");
var UserContactInfo = require("ilevus/jsx/core/widget/user/UserContactInfo.jsx");

var Analytics = require("ilevus/jsx/core/util/Analytics.js");
var Messages = require("ilevus/jsx/core/util/Messages.jsx");

var UserIcon = require("ilevus/img/user.png");

module.exports = React.createClass({
    displayName: "exports",
    getInitialState: function getInitialState() {
        return {
            models: null,
            term: null,
            total: 0
        };
    },
    componentDidMount: function componentDidMount() {
        var me = this;
        UserStore.on("fail", function (msg) {
            Toastr.error(msg);
        }, me);
        UserStore.on("search", function (response) {
            me.setState({
                models: response.data,
                term: me.props.params.term,
                total: response.total
            });
        }, me);

        UserStore.dispatch({
            action: UserStore.ACTION_SEARCH,
            data: {
                keywords: me.props.params.term
            }
        });
    },
    componentWillUnmount: function componentWillUnmount() {
        UserStore.off(null, null, this);
    },
    componentWillReceiveProps: function componentWillReceiveProps(newProps) {
        UserStore.dispatch({
            action: UserStore.ACTION_SEARCH,
            data: {
                keywords: newProps.params.term
            }
        });
    },
    componentDidUpdate: function componentDidUpdate() {
        /*$('[data-toggle="tooltip"]').tooltip({
            animation: true
        });*/
    },
    openPhoneDialog: function openPhoneDialog(user, event) {
        event && event.preventDefault();
        Analytics.sendPhoneRequestEvent();
        Modal.detailsModal(Messages.get("LabelContact"), React.createElement(UserContactInfo, { user: user }));
    },
    renderModels: function renderModels() {
        var _this = this;

        if (!(this.state.models.length > 0)) {
            return React.createElement(
                "div",
                { className: "ilv-blankslate ilv-blankslate-lg" },
                React.createElement(
                    "h3",
                    null,
                    Messages.get("TextUserNotFound")
                ),
                React.createElement(
                    "p",
                    null,
                    Messages.get("TextSearchVerifyTerms")
                )
            );
        }

        return React.createElement(
            "div",
            null,
            this.state.models.map(function (model, index) {
                var industry = S(model.Professional.Professional.Industry);
                var headline = S(model.Professional.Professional.Headline);
                var identificador = model.Professional.Professional.NomeURL ? model.Professional.Professional.NomeURL : model.Id;

                return React.createElement(
                    "div",
                    { className: "py-3", style: { borderBottom: "1px solid #eee" }, key: "search-result-" + index },
                    React.createElement(
                        "div",
                        { className: "ilv-media", key: "result-" + index },
                        React.createElement(
                            "div",
                            { className: "ilv-media-left ilv-text-xs-center mr-3" },
                            React.createElement("div", { className: "ilv-avatar-fluid ilv-avatar-fluid-xl",
                                style: { marginRight: "10px", backgroundImage: "url(" + (S(model.Image).isEmpty() ? UserIcon : model.Image) + ")" } })
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-media-body" },
                            React.createElement(
                                "div",
                                { style: { marginBottom: ".25rem" } },
                                React.createElement(
                                    Link,
                                    { to: "/profile/" + identificador },
                                    React.createElement(
                                        "strong",
                                        null,
                                        model.Name,
                                        " ",
                                        model.Surname
                                    )
                                )
                            ),
                            React.createElement(
                                "div",
                                null,
                                React.createElement(
                                    "p",
                                    { className: "ilv-text-small" },
                                    React.createElement(
                                        "span",
                                        { className: "ilv-tag ilv-tag-warning ml-0" },
                                        model.Premium && model.Premium.Active ? 'Premium' : ''
                                    ),
                                    industry.isEmpty() ? "" : industry.s
                                ),
                                React.createElement(
                                    "span",
                                    { className: "ilv-tag ilv-tag-success ml-0" },
                                    "4.9 ",
                                    React.createElement(
                                        "sup",
                                        null,
                                        "/ 5.0"
                                    )
                                ),
                                React.createElement(
                                    "a",
                                    { className: "small", href: "" },
                                    Messages.format("TextEvaluations", [32])
                                )
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-media-right ilv-text-small" },
                            React.createElement(
                                "p",
                                { style: { marginBottom: ".25rem" } },
                                React.createElement(
                                    "a",
                                    { href: "" },
                                    React.createElement(
                                        "i",
                                        { className: "ilv-icon m-r-1 material-icons md-18" },
                                        "\uE878"
                                    ),
                                    React.createElement(
                                        "span",
                                        { className: "hidden-sm-down" },
                                        Messages.get("ActionRequestMeeting")
                                    )
                                )
                            ),
                            React.createElement(
                                "p",
                                { style: { marginBottom: ".25rem" } },
                                React.createElement(
                                    Link,
                                    { to: "/notifications/messages/" + model.Id },
                                    React.createElement(
                                        "i",
                                        { className: "ilv-icon m-r-1 material-icons md-18" },
                                        "\uE0BE"
                                    ),
                                    React.createElement(
                                        "span",
                                        { className: "hidden-sm-down" },
                                        Messages.get("ActionSendMessage")
                                    )
                                )
                            ),
                            !model.PhoneNumber ? "" : React.createElement(
                                "p",
                                { style: { marginBottom: ".25rem" } },
                                React.createElement(
                                    "a",
                                    { href: "", onClick: _this.openPhoneDialog.bind(_this, model) },
                                    React.createElement(
                                        "i",
                                        { className: "ilv-icon m-r-1 material-icons md-18" },
                                        "\uE0B0"
                                    ),
                                    React.createElement(
                                        "span",
                                        { className: "hidden-sm-down" },
                                        Messages.get("ActionRequestPhone")
                                    )
                                )
                            )
                        )
                    )
                );
            })
        );
    },
    render: function render() {
        if (!this.state.models) {
            return React.createElement(LoadingGauge, null);
        }

        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                { className: "my-5", role: "banner" },
                React.createElement(
                    "div",
                    { className: "container" },
                    React.createElement(
                        "div",
                        { className: "row" },
                        React.createElement(
                            "div",
                            { className: "col" },
                            React.createElement(
                                "div",
                                { className: "ilv-media ilv-media-middle" },
                                React.createElement(
                                    "div",
                                    { className: "ilv-media-body" },
                                    React.createElement(
                                        "h2",
                                        null,
                                        this.state.term
                                    ),
                                    React.createElement(
                                        "p",
                                        { className: "ilv-text-small" },
                                        Messages.format("TextSearchNumberOfResults", [this.state.total, this.state.term])
                                    )
                                )
                            ),
                            React.createElement(
                                "div",
                                { className: "ilv-media ilv-media-middle mb-3" },
                                React.createElement(
                                    "div",
                                    { className: "ilv-media-body" },
                                    React.createElement(AdRowBar, { keyword: this.props.params.term, limit: "1", isMobile: "true" })
                                )
                            ),
                            this.renderModels()
                        ),
                        React.createElement(
                            "div",
                            { className: "col-3 hidden-sm-down" },
                            React.createElement(AdSideBar, { keyword: this.props.params.term, limit: "1", isMobile: "false" })
                        )
                    )
                )
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }

    __REACT_HOT_LOADER__.register(Link, "Link", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/Search.jsx");
}();

;