
var S = require("string");
require("ilevus/jsx/vendor/intlTelInput.js");

var React = require("react");
var Link = require("react-router").Link;
var Toastr = require("toastr");

var UserSession = require("ilevus/jsx/core/store/UserSession.jsx");

var AddressForm = require("ilevus/jsx/core/widget/user/AddressForm.jsx");
var LoadingGauge = require("ilevus/jsx/core/widget/LoadingGauge.jsx");
var Modal = require("ilevus/jsx/core/widget/Modal.jsx");

var Messages = require("ilevus/jsx/core/util/Messages.jsx");

var UserIcon = require("ilevus/img/user.png");

module.exports = React.createClass({
    displayName: "exports",

    contextTypes: {
        router: React.PropTypes.object
    },
    getInitialState: function getInitialState() {
        return {
            loading: UserSession.get("loading"),
            picture: UserSession.get("loading") ? null : UserSession.get("user").Image
        };
    },

    phoneFilterRe: /[0-9\-\+ ]/,
    componentDidMount: function componentDidMount() {
        var me = this;
        UserSession.on("fail", function (msg) {
            $(me.refs["profile-save"]).removeClass("loading").removeAttr("disabled");
            $(me.refs["address-save"]).removeClass("loading").removeAttr("disabled");
            Toastr.error(msg);
        }, me);
        UserSession.on("loaded", function () {
            me.setState({
                loading: false,
                picture: UserSession.get("user").Image
            });
        }, me);
        UserSession.on("update", function () {
            $(me.refs['picture-remove']).removeClass("loading").removeAttr("disabled", "disabled");
            me.setState({
                picture: UserSession.get("user").Image
            });
        }, me);
        UserSession.on("updateprofile", function () {
            $(me.refs["profile-save"]).removeClass("loading").removeAttr("disabled");
            Toastr.success(Messages.get("TextProfileUpdateSuccess"));
        }, me);
        UserSession.on("updateaddress", function () {
            $(me.refs["address-save"]).removeClass("loading").removeAttr("disabled");
            Toastr.success(Messages.get("TextAddressUpdateSuccess"));
        }, me);

        this.updatePhoneInput();
    },
    componentWillUnmount: function componentWillUnmount() {
        UserSession.off(null, null, this);
    },
    componentDidUpdate: function componentDidUpdate() {
        this.updatePhoneInput();
    },
    saveProfile: function saveProfile(event) {
        if (!this.phoneNumberValidation()) {
            Toastr.error(Messages.get("ValidationPhoneNumberInvalid"));
            return;
        }
        $(this.refs["profile-save"]).addClass("loading").attr("disabled", "disabled");
        var data = {
            Birthdate: this.refs['profile-birthdate'].value,
            Name: this.refs['profile-name'].value,
            PhoneNumber: $.trim($("#editProfileFormPhone").val()),
            Sex: this.refs['profile-sex'].value,
            Surname: this.refs['profile-surname'].value
        };

        UserSession.dispatch({
            action: UserSession.ACTION_UPDATE_PROFILE,
            data: data
        });
    },
    saveAddress: function saveAddress() {
        $(this.refs["address-save"]).addClass("loading").attr("disabled", "disabled");
        var data = this.refs['form-address'].getValues();

        UserSession.dispatch({
            action: UserSession.ACTION_UPDATE_ADDRESS,
            data: data
        });
    },
    removePicture: function removePicture(evt) {
        var _this = this;

        evt.preventDefault();
        Modal.confirm(Messages.get("LabelWarning"), Messages.get("TextRemovePictureConfirmation"), function () {
            Modal.hide();
            $(_this.refs['picture-remove']).addClass("loading").attr("disabled", "disabled");
            UserSession.dispatch({
                action: UserSession.ACTION_REMOVE_PICTURE
            });
        });
    },
    updatePicture: function updatePicture() {
        Modal.uploadFile(Messages.get("ActionSendPicture"), React.createElement(
            "p",
            null,
            Messages.get("TextSendPicture")
        ), UserSession.url + "/UpdatePicture", function (arg1, arg2) {
            Modal.hide();
            Toastr.success(Messages.get("TextPictureUpdateSuccess"));
            UserSession.dispatch({
                action: UserSession.ACTION_REFRESH
            });
        }, function (xhr, status) {
            Modal.hide();
            if (xhr.responseJSON && xhr.responseJSON.Message) {
                Toastr.error(xhr.responseJSON.Message);
            } else {
                Toastr.error(Messages.get("TextUnexpectedError"));
            }
        });
    },
    updatePhoneInput: function updatePhoneInput() {
        $("#editProfileFormPhone").intlTelInput();
    },
    phoneNumberValidation: function phoneNumberValidation() {
        if (!$("#editProfileFormPhone").intlTelInput("isValidNumber")) {
            $("#editProfileFormPhone").addClass("ilv-invalid");
            return false;
        } else {
            $("#editProfileFormPhone").removeClass("ilv-invalid");
            return true;
        }
    },
    phoneNumberFilter: function phoneNumberFilter(event, opts) {
        if (event.key && event.key.match && !event.key.match(this.phoneFilterRe)) event.preventDefault();
    },
    render: function render() {
        if (this.state.loading) {
            return React.createElement(LoadingGauge, null);
        }
        var user = UserSession.get("user");
        var pic = S(this.state.picture);
        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                { className: "mb-5" },
                React.createElement(
                    "h4",
                    null,
                    Messages.get("LabelProfilePicture")
                ),
                React.createElement(
                    "div",
                    { className: "ilv-form-group" },
                    React.createElement(
                        "div",
                        { className: "ilv-media ilv-media-middle" },
                        React.createElement(
                            "div",
                            { className: "ilv-media-left" },
                            React.createElement(
                                "div",
                                { className: "media-left" },
                                React.createElement("div", { className: "ilv-avatar-fluid ilv-avatar-fluid-lg",
                                    style: { backgroundImage: "url(" + (pic.isEmpty() ? UserIcon : pic.s) + ")" } })
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-media-body" },
                            React.createElement(
                                "span",
                                { className: "ilv-font-weight-semibold" },
                                Messages.get("LabelSelectPicture")
                            ),
                            React.createElement(
                                "p",
                                { className: "ilv-text-small text-muted m-a-0" },
                                Messages.get("TextProfilePictureLimitations")
                            )
                        )
                    )
                ),
                React.createElement(
                    "button",
                    { className: "ilv-btn ilv-btn-neutral", onClick: this.updatePicture },
                    Messages.get("ActionSendPicture")
                ),
                pic.isEmpty() ? "" : React.createElement(
                    "button",
                    { className: "ilv-btn ilv-btn-link", onClick: this.removePicture, ref: "picture-remove" },
                    Messages.get("ActionRemovePicture")
                )
            ),
            React.createElement(
                "div",
                { className: "row" },
                React.createElement(
                    "div",
                    { className: "col mb-5" },
                    React.createElement(
                        "h4",
                        null,
                        Messages.get("LabelBasicInfo")
                    ),
                    React.createElement(
                        "form",
                        null,
                        React.createElement(
                            "div",
                            { className: "ilv-form-group" },
                            React.createElement(
                                "label",
                                { className: "ilv-form-label", htmlFor: "editProfileFormFirstName" },
                                Messages.get("LabelName")
                            ),
                            React.createElement("input", { className: "ilv-form-control",
                                type: "text",
                                spellCheck: false,
                                id: "editProfileFormFirstName",
                                ref: "profile-name",
                                defaultValue: user.Name })
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-form-group" },
                            React.createElement(
                                "label",
                                { className: "ilv-form-label", htmlFor: "editProfileFormLastName" },
                                Messages.get("LabelSurname")
                            ),
                            React.createElement("input", { className: "ilv-form-control",
                                type: "text",
                                spellCheck: false,
                                id: "editProfileFormLastName",
                                ref: "profile-surname",
                                defaultValue: user.Surname })
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-form-group" },
                            React.createElement(
                                "label",
                                { className: "ilv-form-label", htmlFor: "editProfileFormGender" },
                                Messages.get("LabelSex")
                            ),
                            React.createElement(
                                "select",
                                { className: "ilv-form-control", id: "editProfileFormGender", ref: "profile-sex", defaultValue: user.Sex },
                                React.createElement(
                                    "option",
                                    { value: "" },
                                    "-- ",
                                    Messages.get("LabelSex"),
                                    " --"
                                ),
                                React.createElement(
                                    "option",
                                    { value: "M" },
                                    Messages.get("SexMale")
                                ),
                                React.createElement(
                                    "option",
                                    { value: "F" },
                                    Messages.get("SexFemale")
                                )
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-form-group" },
                            React.createElement(
                                "label",
                                { className: "ilv-form-label", htmlFor: "editProfileFormBirth" },
                                Messages.get("LabelBirthdate")
                            ),
                            React.createElement("input", { className: "ilv-form-control",
                                type: "date",
                                id: "editProfileFormBirth",
                                ref: "profile-birthdate",
                                defaultValue: user.Birthdate ? user.Birthdate.substr(0, 10) : null })
                        ),
                        React.createElement(
                            "div",
                            { className: "ilv-form-group m-b-0" },
                            React.createElement(
                                "label",
                                { className: "ilv-form-label", htmlFor: "editProfileFormPhone" },
                                Messages.get("LabelPhoneNumber")
                            ),
                            React.createElement("input", { onKeyPress: this.phoneNumberFilter, onKeyUp: this.phoneNumberValidation,
                                type: "tel",
                                spellCheck: false,
                                id: "editProfileFormPhone",
                                ref: "profile-phonenumber",
                                defaultValue: user.PhoneNumber }),
                            React.createElement(
                                "span",
                                { className: "ilv-text-small" },
                                Messages.get("TextPhoneHelp")
                            )
                        )
                    ),
                    React.createElement(
                        "button",
                        { className: "ilv-btn ilv-btn-primary", onClick: this.saveProfile, ref: "profile-save" },
                        Messages.get("LabelSave")
                    )
                ),
                React.createElement(
                    "div",
                    { className: "col mb-5" },
                    React.createElement(
                        "h4",
                        null,
                        Messages.get("LabelMyAddress")
                    ),
                    React.createElement(AddressForm, { addressData: user.Professional.Professional,
                        ref: "form-address" }),
                    React.createElement(
                        "button",
                        { className: "ilv-btn ilv-btn-primary", onClick: this.saveAddress, ref: "address-save" },
                        Messages.get("LabelUpdateAddress")
                    )
                )
            )
        );
    }
});
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }

    __REACT_HOT_LOADER__.register(Link, "Link", "C:/Projetos/Nova pasta/ilevus/Ilevus/Views/legacy/jsx/core/view/user/Profile.jsx");
}();

;